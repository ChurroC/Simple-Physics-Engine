<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="356206610242"><g><title>&lt;u32 as core::ops::arith::Sub&gt;::sub (133,400,197 samples, 0.04%)</title><rect x="12.7976%" y="165" width="0.0375%" height="15" fill="rgb(227,0,7)" fg:x="45585756041" fg:w="133400197"/><text x="13.0476%" y="175.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::m_adj (2,423,269,744 samples, 0.68%)</title><rect x="12.7964%" y="181" width="0.6803%" height="15" fill="rgb(217,0,24)" fg:x="45581744005" fg:w="2423269744"/><text x="13.0464%" y="191.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shr&gt;::shr (2,260,782,286 samples, 0.63%)</title><rect x="12.8421%" y="165" width="0.6347%" height="15" fill="rgb(221,193,54)" fg:x="45744231463" fg:w="2260782286"/><text x="13.0921%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (2,227,682,989 samples, 0.63%)</title><rect x="13.4779%" y="181" width="0.6254%" height="15" fill="rgb(248,212,6)" fg:x="48009025785" fg:w="2227682989"/><text x="13.7279%" y="191.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f32_bits (18,116,348,558 samples, 5.09%)</title><rect x="11.5600%" y="197" width="5.0859%" height="15" fill="rgb(208,68,35)" fg:x="41177531486" fg:w="18116348558"/><text x="11.8100%" y="207.50">compil..</text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (9,057,171,270 samples, 2.54%)</title><rect x="14.1033%" y="181" width="2.5427%" height="15" fill="rgb(232,128,0)" fg:x="50236708774" fg:w="9057171270"/><text x="14.3533%" y="191.50">co..</text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (9,057,171,270 samples, 2.54%)</title><rect x="14.1033%" y="165" width="2.5427%" height="15" fill="rgb(207,160,47)" fg:x="50236708774" fg:w="9057171270"/><text x="14.3533%" y="175.50">co..</text></g><g><title>__floatuntisf (23,840,520,921 samples, 6.69%)</title><rect x="10.2715%" y="229" width="6.6929%" height="15" fill="rgb(228,23,34)" fg:x="36587762302" fg:w="23840520921"/><text x="10.5215%" y="239.50">__floatun..</text></g><g><title>compiler_builtins::float::conv::__floatuntisf (19,250,751,737 samples, 5.40%)</title><rect x="11.5600%" y="213" width="5.4044%" height="15" fill="rgb(218,30,26)" fg:x="41177531486" fg:w="19250751737"/><text x="11.8100%" y="223.50">compile..</text></g><g><title>core::f32::&lt;impl f32&gt;::from_bits (1,134,403,179 samples, 0.32%)</title><rect x="16.6459%" y="197" width="0.3185%" height="15" fill="rgb(220,122,19)" fg:x="59293880044" fg:w="1134403179"/><text x="16.8959%" y="207.50"></text></g><g><title>core::time::Duration::as_millis (7,075,225,486 samples, 1.99%)</title><rect x="16.9644%" y="229" width="1.9863%" height="15" fill="rgb(250,228,42)" fg:x="60428283223" fg:w="7075225486"/><text x="17.2144%" y="239.50">c..</text></g><g><title>macroquad::get_context (2,242,728,124 samples, 0.63%)</title><rect x="19.9418%" y="213" width="0.6296%" height="15" fill="rgb(240,193,28)" fg:x="71034100389" fg:w="2242728124"/><text x="20.1918%" y="223.50"></text></g><g><title>macroquad::thread_assert::same_thread (2,233,701,043 samples, 0.63%)</title><rect x="19.9444%" y="197" width="0.6271%" height="15" fill="rgb(216,20,37)" fg:x="71043127470" fg:w="2233701043"/><text x="20.1944%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,221,664,935 samples, 0.62%)</title><rect x="19.9477%" y="181" width="0.6237%" height="15" fill="rgb(206,188,39)" fg:x="71055163578" fg:w="2221664935"/><text x="20.1977%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,221,664,935 samples, 0.62%)</title><rect x="19.9477%" y="165" width="0.6237%" height="15" fill="rgb(217,207,13)" fg:x="71055163578" fg:w="2221664935"/><text x="20.1977%" y="175.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2,221,664,935 samples, 0.62%)</title><rect x="19.9477%" y="149" width="0.6237%" height="15" fill="rgb(231,73,38)" fg:x="71055163578" fg:w="2221664935"/><text x="20.1977%" y="159.50"></text></g><g><title>macroquad::thread_assert::same_thread::CURRENT_THREAD_ID::{{constant}}::{{closure}} (2,221,664,935 samples, 0.62%)</title><rect x="19.9477%" y="133" width="0.6237%" height="15" fill="rgb(225,20,46)" fg:x="71055163578" fg:w="2221664935"/><text x="20.1977%" y="143.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (2,221,664,935 samples, 0.62%)</title><rect x="19.9477%" y="117" width="0.6237%" height="15" fill="rgb(210,31,41)" fg:x="71055163578" fg:w="2221664935"/><text x="20.1977%" y="127.50"></text></g><g><title>macroquad::input::is_key_pressed (8,048,144,216 samples, 2.26%)</title><rect x="18.9507%" y="229" width="2.2594%" height="15" fill="rgb(221,200,47)" fg:x="67503508709" fg:w="8048144216"/><text x="19.2007%" y="239.50">m..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2,274,824,412 samples, 0.64%)</title><rect x="20.5714%" y="213" width="0.6386%" height="15" fill="rgb(226,26,5)" fg:x="73276828513" fg:w="2274824412"/><text x="20.8214%" y="223.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2,274,824,412 samples, 0.64%)</title><rect x="20.5714%" y="197" width="0.6386%" height="15" fill="rgb(249,33,26)" fg:x="73276828513" fg:w="2274824412"/><text x="20.8214%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,274,824,412 samples, 0.64%)</title><rect x="20.5714%" y="181" width="0.6386%" height="15" fill="rgb(235,183,28)" fg:x="73276828513" fg:w="2274824412"/><text x="20.8214%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,274,824,412 samples, 0.64%)</title><rect x="20.5714%" y="165" width="0.6386%" height="15" fill="rgb(221,5,38)" fg:x="73276828513" fg:w="2274824412"/><text x="20.8214%" y="175.50"></text></g><g><title>macroquad::get_context (1,119,358,044 samples, 0.31%)</title><rect x="21.5313%" y="213" width="0.3142%" height="15" fill="rgb(247,18,42)" fg:x="76696086194" fg:w="1119358044"/><text x="21.7813%" y="223.50"></text></g><g><title>macroquad::thread_assert::same_thread (1,115,346,008 samples, 0.31%)</title><rect x="21.5325%" y="197" width="0.3131%" height="15" fill="rgb(241,131,45)" fg:x="76700098230" fg:w="1115346008"/><text x="21.7825%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,103,309,900 samples, 0.31%)</title><rect x="21.5359%" y="181" width="0.3097%" height="15" fill="rgb(249,31,29)" fg:x="76712134338" fg:w="1103309900"/><text x="21.7859%" y="191.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,103,309,900 samples, 0.31%)</title><rect x="21.5359%" y="165" width="0.3097%" height="15" fill="rgb(225,111,53)" fg:x="76712134338" fg:w="1103309900"/><text x="21.7859%" y="175.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,103,309,900 samples, 0.31%)</title><rect x="21.5359%" y="149" width="0.3097%" height="15" fill="rgb(238,160,17)" fg:x="76712134338" fg:w="1103309900"/><text x="21.7859%" y="159.50"></text></g><g><title>macroquad::thread_assert::same_thread::CURRENT_THREAD_ID::{{constant}}::{{closure}} (1,103,309,900 samples, 0.31%)</title><rect x="21.5359%" y="133" width="0.3097%" height="15" fill="rgb(214,148,48)" fg:x="76712134338" fg:w="1103309900"/><text x="21.7859%" y="143.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (1,103,309,900 samples, 0.31%)</title><rect x="21.5359%" y="117" width="0.3097%" height="15" fill="rgb(232,36,49)" fg:x="76712134338" fg:w="1103309900"/><text x="21.7859%" y="127.50"></text></g><g><title>macroquad::input::is_mouse_button_down (3,461,384,059 samples, 0.97%)</title><rect x="21.2101%" y="229" width="0.9717%" height="15" fill="rgb(209,103,24)" fg:x="75551652925" fg:w="3461384059"/><text x="21.4601%" y="239.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1,197,592,746 samples, 0.34%)</title><rect x="21.8456%" y="213" width="0.3362%" height="15" fill="rgb(229,88,8)" fg:x="77815444238" fg:w="1197592746"/><text x="22.0956%" y="223.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1,197,592,746 samples, 0.34%)</title><rect x="21.8456%" y="197" width="0.3362%" height="15" fill="rgb(213,181,19)" fg:x="77815444238" fg:w="1197592746"/><text x="22.0956%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,197,592,746 samples, 0.34%)</title><rect x="21.8456%" y="181" width="0.3362%" height="15" fill="rgb(254,191,54)" fg:x="77815444238" fg:w="1197592746"/><text x="22.0956%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,197,592,746 samples, 0.34%)</title><rect x="21.8456%" y="165" width="0.3362%" height="15" fill="rgb(241,83,37)" fg:x="77815444238" fg:w="1197592746"/><text x="22.0956%" y="175.50"></text></g><g><title>&lt;std::thread::ThreadId as core::cmp::PartialEq&gt;::eq (1,101,303,882 samples, 0.31%)</title><rect x="22.8660%" y="181" width="0.3092%" height="15" fill="rgb(233,36,39)" fg:x="81450348854" fg:w="1101303882"/><text x="23.1160%" y="191.50"></text></g><g><title>&lt;core::num::nonzero::NonZero&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,101,303,882 samples, 0.31%)</title><rect x="22.8660%" y="165" width="0.3092%" height="15" fill="rgb(226,3,54)" fg:x="81450348854" fg:w="1101303882"/><text x="23.1160%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (1,101,303,882 samples, 0.31%)</title><rect x="22.8660%" y="149" width="0.3092%" height="15" fill="rgb(245,192,40)" fg:x="81450348854" fg:w="1101303882"/><text x="23.1160%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1,058,174,495 samples, 0.30%)</title><rect x="23.1752%" y="181" width="0.2971%" height="15" fill="rgb(238,167,29)" fg:x="82551652736" fg:w="1058174495"/><text x="23.4252%" y="191.50"></text></g><g><title>macroquad::time::get_fps (4,605,817,328 samples, 1.29%)</title><rect x="22.1818%" y="229" width="1.2930%" height="15" fill="rgb(232,182,51)" fg:x="79013036984" fg:w="4605817328"/><text x="22.4318%" y="239.50"></text></g><g><title>macroquad::get_context (2,171,514,485 samples, 0.61%)</title><rect x="22.8652%" y="213" width="0.6096%" height="15" fill="rgb(231,60,39)" fg:x="81447339827" fg:w="2171514485"/><text x="23.1152%" y="223.50"></text></g><g><title>macroquad::thread_assert::same_thread (2,168,505,458 samples, 0.61%)</title><rect x="22.8660%" y="197" width="0.6088%" height="15" fill="rgb(208,69,12)" fg:x="81450348854" fg:w="2168505458"/><text x="23.1160%" y="207.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (324,974,916 samples, 0.09%)</title><rect x="23.4810%" y="213" width="0.0912%" height="15" fill="rgb(235,93,37)" fg:x="83640920510" fg:w="324974916"/><text x="23.7310%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (322,968,898 samples, 0.09%)</title><rect x="23.4816%" y="197" width="0.0907%" height="15" fill="rgb(213,116,39)" fg:x="83642926528" fg:w="322968898"/><text x="23.7316%" y="207.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (329,989,961 samples, 0.09%)</title><rect x="23.7161%" y="197" width="0.0926%" height="15" fill="rgb(222,207,29)" fg:x="84478433025" fg:w="329989961"/><text x="23.9661%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (329,989,961 samples, 0.09%)</title><rect x="23.7161%" y="181" width="0.0926%" height="15" fill="rgb(206,96,30)" fg:x="84478433025" fg:w="329989961"/><text x="23.9661%" y="191.50"></text></g><g><title>glam::f32::math::std_math::sqrt (272,818,448 samples, 0.08%)</title><rect x="23.8274%" y="181" width="0.0766%" height="15" fill="rgb(218,138,4)" fg:x="84874621580" fg:w="272818448"/><text x="24.0774%" y="191.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (272,818,448 samples, 0.08%)</title><rect x="23.8274%" y="165" width="0.0766%" height="15" fill="rgb(250,191,14)" fg:x="84874621580" fg:w="272818448"/><text x="24.0774%" y="175.50"></text></g><g><title>glam::f32::vec2::Vec2::length (779,337,993 samples, 0.22%)</title><rect x="23.8274%" y="197" width="0.2188%" height="15" fill="rgb(239,60,40)" fg:x="84874621580" fg:w="779337993"/><text x="24.0774%" y="207.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (506,519,545 samples, 0.14%)</title><rect x="23.9039%" y="181" width="0.1422%" height="15" fill="rgb(206,27,48)" fg:x="85147440028" fg:w="506519545"/><text x="24.1539%" y="191.50"></text></g><g><title>glam::f32::vec2::Vec2::project_onto (187,562,683 samples, 0.05%)</title><rect x="24.0461%" y="197" width="0.0527%" height="15" fill="rgb(225,35,8)" fg:x="85653959573" fg:w="187562683"/><text x="24.2961%" y="207.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (151,454,359 samples, 0.04%)</title><rect x="24.0563%" y="181" width="0.0425%" height="15" fill="rgb(250,213,24)" fg:x="85690067897" fg:w="151454359"/><text x="24.3063%" y="191.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Div&lt;f32&gt;&gt;::div (78,234,702 samples, 0.02%)</title><rect x="24.1458%" y="181" width="0.0220%" height="15" fill="rgb(247,123,22)" fg:x="86009024759" fg:w="78234702"/><text x="24.3958%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (78,234,702 samples, 0.02%)</title><rect x="24.1458%" y="165" width="0.0220%" height="15" fill="rgb(231,138,38)" fg:x="86009024759" fg:w="78234702"/><text x="24.3958%" y="175.50"></text></g><g><title>physics_engine::verlet::Verlet::get_velocity (226,680,034 samples, 0.06%)</title><rect x="24.1047%" y="197" width="0.0636%" height="15" fill="rgb(231,145,46)" fg:x="85862585445" fg:w="226680034"/><text x="24.3547%" y="207.50"></text></g><g><title>physics_engine::verlet::Verlet::set_position (37,111,333 samples, 0.01%)</title><rect x="24.1684%" y="197" width="0.0104%" height="15" fill="rgb(251,118,11)" fg:x="86089265479" fg:w="37111333"/><text x="24.4184%" y="207.50"></text></g><g><title>physics_engine::solver::Solver::apply_wall_constraints (2,202,607,764 samples, 0.62%)</title><rect x="23.5725%" y="213" width="0.6184%" height="15" fill="rgb(217,147,25)" fg:x="83966898435" fg:w="2202607764"/><text x="23.8225%" y="223.50"></text></g><g><title>physics_engine::verlet::Verlet::set_velocity (43,129,387 samples, 0.01%)</title><rect x="24.1788%" y="197" width="0.0121%" height="15" fill="rgb(247,81,37)" fg:x="86126376812" fg:w="43129387"/><text x="24.4288%" y="207.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (738,214,624 samples, 0.21%)</title><rect x="27.8292%" y="197" width="0.2072%" height="15" fill="rgb(209,12,38)" fg:x="99129385488" fg:w="738214624"/><text x="28.0792%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (738,214,624 samples, 0.21%)</title><rect x="27.8292%" y="181" width="0.2072%" height="15" fill="rgb(227,1,9)" fg:x="99129385488" fg:w="738214624"/><text x="28.0792%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (738,214,624 samples, 0.21%)</title><rect x="27.8292%" y="165" width="0.2072%" height="15" fill="rgb(248,47,43)" fg:x="99129385488" fg:w="738214624"/><text x="28.0792%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (319,959,871 samples, 0.09%)</title><rect x="28.0364%" y="181" width="0.0898%" height="15" fill="rgb(221,10,30)" fg:x="99867600112" fg:w="319959871"/><text x="28.2864%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (319,959,871 samples, 0.09%)</title><rect x="28.0364%" y="165" width="0.0898%" height="15" fill="rgb(210,229,1)" fg:x="99867600112" fg:w="319959871"/><text x="28.2864%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (166,499,494 samples, 0.05%)</title><rect x="28.0795%" y="149" width="0.0467%" height="15" fill="rgb(222,148,37)" fg:x="100021060489" fg:w="166499494"/><text x="28.3295%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (166,499,494 samples, 0.05%)</title><rect x="28.0795%" y="133" width="0.0467%" height="15" fill="rgb(234,67,33)" fg:x="100021060489" fg:w="166499494"/><text x="28.3295%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (166,499,494 samples, 0.05%)</title><rect x="28.0795%" y="117" width="0.0467%" height="15" fill="rgb(247,98,35)" fg:x="100021060489" fg:w="166499494"/><text x="28.3295%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (166,499,494 samples, 0.05%)</title><rect x="28.0795%" y="101" width="0.0467%" height="15" fill="rgb(247,138,52)" fg:x="100021060489" fg:w="166499494"/><text x="28.3295%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (920,762,262 samples, 0.26%)</title><rect x="28.0364%" y="197" width="0.2585%" height="15" fill="rgb(213,79,30)" fg:x="99867600112" fg:w="920762262"/><text x="28.2864%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (600,802,391 samples, 0.17%)</title><rect x="28.1262%" y="181" width="0.1687%" height="15" fill="rgb(246,177,23)" fg:x="100187559983" fg:w="600802391"/><text x="28.3762%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (600,802,391 samples, 0.17%)</title><rect x="28.1262%" y="165" width="0.1687%" height="15" fill="rgb(230,62,27)" fg:x="100187559983" fg:w="600802391"/><text x="28.3762%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (37,111,333 samples, 0.01%)</title><rect x="28.2949%" y="197" width="0.0104%" height="15" fill="rgb(216,154,8)" fg:x="100788362374" fg:w="37111333"/><text x="28.5449%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (37,111,333 samples, 0.01%)</title><rect x="28.2949%" y="181" width="0.0104%" height="15" fill="rgb(244,35,45)" fg:x="100788362374" fg:w="37111333"/><text x="28.5449%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (37,111,333 samples, 0.01%)</title><rect x="28.2949%" y="165" width="0.0104%" height="15" fill="rgb(251,115,12)" fg:x="100788362374" fg:w="37111333"/><text x="28.5449%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,276,830,457 samples, 0.36%)</title><rect x="28.3079%" y="197" width="0.3585%" height="15" fill="rgb(240,54,50)" fg:x="100834500788" fg:w="1276830457"/><text x="28.5579%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,275,827,448 samples, 0.36%)</title><rect x="28.3082%" y="181" width="0.3582%" height="15" fill="rgb(233,84,52)" fg:x="100835503797" fg:w="1275827448"/><text x="28.5582%" y="191.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,183,550,620 samples, 0.33%)</title><rect x="28.6663%" y="197" width="0.3323%" height="15" fill="rgb(207,117,47)" fg:x="102111331245" fg:w="1183550620"/><text x="28.9163%" y="207.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,183,550,620 samples, 0.33%)</title><rect x="28.6663%" y="181" width="0.3323%" height="15" fill="rgb(249,43,39)" fg:x="102111331245" fg:w="1183550620"/><text x="28.9163%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (613,841,508 samples, 0.17%)</title><rect x="29.0062%" y="197" width="0.1723%" height="15" fill="rgb(209,38,44)" fg:x="103321963108" fg:w="613841508"/><text x="29.2562%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (274,824,466 samples, 0.08%)</title><rect x="32.2821%" y="117" width="0.0772%" height="15" fill="rgb(236,212,23)" fg:x="114990969814" fg:w="274824466"/><text x="32.5321%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (274,824,466 samples, 0.08%)</title><rect x="32.2821%" y="101" width="0.0772%" height="15" fill="rgb(242,79,21)" fg:x="114990969814" fg:w="274824466"/><text x="32.5321%" y="111.50"></text></g><g><title>alloc::alloc::realloc (273,821,457 samples, 0.08%)</title><rect x="32.2824%" y="85" width="0.0769%" height="15" fill="rgb(211,96,35)" fg:x="114991972823" fg:w="273821457"/><text x="32.5324%" y="95.50"></text></g><g><title>realloc (262,788,358 samples, 0.07%)</title><rect x="32.2855%" y="69" width="0.0738%" height="15" fill="rgb(253,215,40)" fg:x="115003005922" fg:w="262788358"/><text x="32.5355%" y="79.50"></text></g><g><title>[libc.so.6] (161,484,449 samples, 0.05%)</title><rect x="32.3139%" y="53" width="0.0453%" height="15" fill="rgb(211,81,21)" fg:x="115104309831" fg:w="161484449"/><text x="32.5639%" y="63.50"></text></g><g><title>[libc.so.6] (106,318,954 samples, 0.03%)</title><rect x="32.3294%" y="37" width="0.0298%" height="15" fill="rgb(208,190,38)" fg:x="115159475326" fg:w="106318954"/><text x="32.5794%" y="47.50"></text></g><g><title>alloc::raw_vec::finish_grow (345,035,096 samples, 0.10%)</title><rect x="32.2759%" y="133" width="0.0969%" height="15" fill="rgb(235,213,38)" fg:x="114968903616" fg:w="345035096"/><text x="32.5259%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (374,122,357 samples, 0.11%)</title><rect x="32.2691%" y="181" width="0.1050%" height="15" fill="rgb(237,122,38)" fg:x="114944831400" fg:w="374122357"/><text x="32.5191%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (352,056,159 samples, 0.10%)</title><rect x="32.2753%" y="165" width="0.0988%" height="15" fill="rgb(244,218,35)" fg:x="114966897598" fg:w="352056159"/><text x="32.5253%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (352,056,159 samples, 0.10%)</title><rect x="32.2753%" y="149" width="0.0988%" height="15" fill="rgb(240,68,47)" fg:x="114966897598" fg:w="352056159"/><text x="32.5253%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (590,772,301 samples, 0.17%)</title><rect x="32.3742%" y="181" width="0.1659%" height="15" fill="rgb(210,16,53)" fg:x="115318953757" fg:w="590772301"/><text x="32.6242%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (590,772,301 samples, 0.17%)</title><rect x="32.3742%" y="165" width="0.1659%" height="15" fill="rgb(235,124,12)" fg:x="115318953757" fg:w="590772301"/><text x="32.6242%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (590,772,301 samples, 0.17%)</title><rect x="32.3742%" y="149" width="0.1659%" height="15" fill="rgb(224,169,11)" fg:x="115318953757" fg:w="590772301"/><text x="32.6242%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (590,772,301 samples, 0.17%)</title><rect x="32.3742%" y="133" width="0.1659%" height="15" fill="rgb(250,166,2)" fg:x="115318953757" fg:w="590772301"/><text x="32.6242%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (47,141,423 samples, 0.01%)</title><rect x="32.5400%" y="181" width="0.0132%" height="15" fill="rgb(242,216,29)" fg:x="115909726058" fg:w="47141423"/><text x="32.7900%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16,062,186,126 samples, 4.51%)</title><rect x="29.1785%" y="197" width="4.5092%" height="15" fill="rgb(230,116,27)" fg:x="103935804616" fg:w="16062186126"/><text x="29.4285%" y="207.50">alloc..</text></g><g><title>core::ptr::write (4,041,123,261 samples, 1.13%)</title><rect x="32.5533%" y="181" width="1.1345%" height="15" fill="rgb(228,99,48)" fg:x="115956867481" fg:w="4041123261"/><text x="32.8033%" y="191.50"></text></g><g><title>core::cmp::Ord::max (876,629,866 samples, 0.25%)</title><rect x="33.6877%" y="197" width="0.2461%" height="15" fill="rgb(253,11,6)" fg:x="119997990742" fg:w="876629866"/><text x="33.9377%" y="207.50"></text></g><g><title>core::cmp::max_by (876,629,866 samples, 0.25%)</title><rect x="33.6877%" y="181" width="0.2461%" height="15" fill="rgb(247,143,39)" fg:x="119997990742" fg:w="876629866"/><text x="33.9377%" y="191.50"></text></g><g><title>core::cmp::Ord::min (10,230,691,800 samples, 2.87%)</title><rect x="33.9339%" y="197" width="2.8721%" height="15" fill="rgb(236,97,10)" fg:x="120874620608" fg:w="10230691800"/><text x="34.1839%" y="207.50">co..</text></g><g><title>core::cmp::min_by (10,230,691,800 samples, 2.87%)</title><rect x="33.9339%" y="181" width="2.8721%" height="15" fill="rgb(233,208,19)" fg:x="120874620608" fg:w="10230691800"/><text x="34.1839%" y="191.50">co..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,492,477,311 samples, 1.26%)</title><rect x="36.8060%" y="197" width="1.2612%" height="15" fill="rgb(216,164,2)" fg:x="131105312408" fg:w="4492477311"/><text x="37.0560%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,492,477,311 samples, 1.26%)</title><rect x="36.8060%" y="181" width="1.2612%" height="15" fill="rgb(220,129,5)" fg:x="131105312408" fg:w="4492477311"/><text x="37.0560%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,330,992,943 samples, 0.37%)</title><rect x="37.6935%" y="165" width="0.3737%" height="15" fill="rgb(242,17,10)" fg:x="134266796776" fg:w="1330992943"/><text x="37.9435%" y="175.50"></text></g><g><title>physics_engine::solver::Solver::find_collisions_space_partitioning (50,453,358,718 samples, 14.16%)</title><rect x="24.1909%" y="213" width="14.1641%" height="15" fill="rgb(242,107,0)" fg:x="86169506199" fg:w="50453358718"/><text x="24.4409%" y="223.50">physics_engine::solver..</text></g><g><title>std::f32::&lt;impl f32&gt;::floor (1,025,075,198 samples, 0.29%)</title><rect x="38.0672%" y="197" width="0.2878%" height="15" fill="rgb(251,28,31)" fg:x="135597789719" fg:w="1025075198"/><text x="38.3172%" y="207.50"></text></g><g><title>[libm.so.6] (1,006,018,027 samples, 0.28%)</title><rect x="38.0725%" y="181" width="0.2824%" height="15" fill="rgb(233,223,10)" fg:x="135616846890" fg:w="1006018027"/><text x="38.3225%" y="191.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,342,026,015 samples, 0.66%)</title><rect x="52.4664%" y="181" width="0.6575%" height="15" fill="rgb(215,21,27)" fg:x="186888660952" fg:w="2342026015"/><text x="52.7164%" y="191.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,885,656,893 samples, 0.81%)</title><rect x="52.4655%" y="197" width="0.8101%" height="15" fill="rgb(232,23,21)" fg:x="186885651925" fg:w="2885656893"/><text x="52.7155%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (540,621,851 samples, 0.15%)</title><rect x="53.1239%" y="181" width="0.1518%" height="15" fill="rgb(244,5,23)" fg:x="189230686967" fg:w="540621851"/><text x="53.3739%" y="191.50"></text></g><g><title>core::ptr::read (540,621,851 samples, 0.15%)</title><rect x="53.1239%" y="165" width="0.1518%" height="15" fill="rgb(226,81,46)" fg:x="189230686967" fg:w="540621851"/><text x="53.3739%" y="175.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Add&gt;::add (15,184,553,251 samples, 4.26%)</title><rect x="53.2756%" y="197" width="4.2628%" height="15" fill="rgb(247,70,30)" fg:x="189771308818" fg:w="15184553251"/><text x="53.5256%" y="207.50">&lt;glam..</text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (15,184,553,251 samples, 4.26%)</title><rect x="53.2756%" y="181" width="4.2628%" height="15" fill="rgb(212,68,19)" fg:x="189771308818" fg:w="15184553251"/><text x="53.5256%" y="191.50">&lt;f32 ..</text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (41,123,369 samples, 0.01%)</title><rect x="57.5438%" y="197" width="0.0115%" height="15" fill="rgb(240,187,13)" fg:x="204974919240" fg:w="41123369"/><text x="57.7938%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (41,123,369 samples, 0.01%)</title><rect x="57.5438%" y="181" width="0.0115%" height="15" fill="rgb(223,113,26)" fg:x="204974919240" fg:w="41123369"/><text x="57.7938%" y="191.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (2,758,274,750 samples, 0.77%)</title><rect x="57.5554%" y="197" width="0.7743%" height="15" fill="rgb(206,192,2)" fg:x="205016042609" fg:w="2758274750"/><text x="57.8054%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (2,758,274,750 samples, 0.77%)</title><rect x="57.5554%" y="181" width="0.7743%" height="15" fill="rgb(241,108,4)" fg:x="205016042609" fg:w="2758274750"/><text x="57.8054%" y="191.50"></text></g><g><title>__libc_free (50,150,450 samples, 0.01%)</title><rect x="58.3300%" y="53" width="0.0141%" height="15" fill="rgb(247,173,49)" fg:x="207775320368" fg:w="50150450"/><text x="58.5800%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,usize)&gt;&gt; (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="197" width="0.0220%" height="15" fill="rgb(224,114,35)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="181" width="0.0220%" height="15" fill="rgb(245,159,27)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(usize,usize),alloc::alloc::Global&gt;&gt; (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="165" width="0.0220%" height="15" fill="rgb(245,172,44)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="175.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="149" width="0.0220%" height="15" fill="rgb(236,23,11)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="133" width="0.0220%" height="15" fill="rgb(205,117,38)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="117" width="0.0220%" height="15" fill="rgb(237,72,25)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="101" width="0.0220%" height="15" fill="rgb(244,70,9)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="85" width="0.0220%" height="15" fill="rgb(217,125,39)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="95.50"></text></g><g><title>alloc::alloc::dealloc (78,234,702 samples, 0.02%)</title><rect x="58.3297%" y="69" width="0.0220%" height="15" fill="rgb(235,36,10)" fg:x="207774317359" fg:w="78234702"/><text x="58.5797%" y="79.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (1,549,648,905 samples, 0.44%)</title><rect x="58.3517%" y="197" width="0.4350%" height="15" fill="rgb(251,123,47)" fg:x="207852552061" fg:w="1549648905"/><text x="58.6017%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_checked (1,549,648,905 samples, 0.44%)</title><rect x="58.3517%" y="181" width="0.4350%" height="15" fill="rgb(221,13,13)" fg:x="207852552061" fg:w="1549648905"/><text x="58.6017%" y="191.50"></text></g><g><title>glam::f32::vec2::&lt;impl core::ops::arith::Mul&lt;glam::f32::vec2::Vec2&gt; for f32&gt;::mul (1,375,125,339 samples, 0.39%)</title><rect x="58.7867%" y="197" width="0.3860%" height="15" fill="rgb(238,131,9)" fg:x="209402200966" fg:w="1375125339"/><text x="59.0367%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1,375,125,339 samples, 0.39%)</title><rect x="58.7867%" y="181" width="0.3860%" height="15" fill="rgb(211,50,8)" fg:x="209402200966" fg:w="1375125339"/><text x="59.0367%" y="191.50"></text></g><g><title>glam::f32::math::std_math::sqrt (1,213,640,890 samples, 0.34%)</title><rect x="59.1728%" y="181" width="0.3407%" height="15" fill="rgb(245,182,24)" fg:x="210777326305" fg:w="1213640890"/><text x="59.4228%" y="191.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (1,213,640,890 samples, 0.34%)</title><rect x="59.1728%" y="165" width="0.3407%" height="15" fill="rgb(242,14,37)" fg:x="210777326305" fg:w="1213640890"/><text x="59.4228%" y="175.50"></text></g><g><title>glam::f32::vec2::Vec2::length (5,918,756,109 samples, 1.66%)</title><rect x="59.1728%" y="197" width="1.6616%" height="15" fill="rgb(246,228,12)" fg:x="210777326305" fg:w="5918756109"/><text x="59.4228%" y="207.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (4,705,115,219 samples, 1.32%)</title><rect x="59.5135%" y="181" width="1.3209%" height="15" fill="rgb(213,55,15)" fg:x="211990967195" fg:w="4705115219"/><text x="59.7635%" y="191.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (937,813,415 samples, 0.26%)</title><rect x="60.8344%" y="181" width="0.2633%" height="15" fill="rgb(209,9,3)" fg:x="216696082414" fg:w="937813415"/><text x="61.0844%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (937,813,415 samples, 0.26%)</title><rect x="60.8344%" y="165" width="0.2633%" height="15" fill="rgb(230,59,30)" fg:x="216696082414" fg:w="937813415"/><text x="61.0844%" y="175.50"></text></g><g><title>glam::f32::vec2::Vec2::project_onto (1,911,735,154 samples, 0.54%)</title><rect x="60.8344%" y="197" width="0.5367%" height="15" fill="rgb(209,121,21)" fg:x="216696082414" fg:w="1911735154"/><text x="61.0844%" y="207.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (973,921,739 samples, 0.27%)</title><rect x="61.0977%" y="181" width="0.2734%" height="15" fill="rgb(220,109,13)" fg:x="217633895829" fg:w="973921739"/><text x="61.3477%" y="191.50"></text></g><g><title>physics_engine::verlet::Verlet::get_mass (1,002,005,991 samples, 0.28%)</title><rect x="61.3711%" y="197" width="0.2813%" height="15" fill="rgb(232,18,1)" fg:x="218607817568" fg:w="1002005991"/><text x="61.6211%" y="207.50"></text></g><g><title>physics_engine::verlet::Verlet::get_position (2,158,475,368 samples, 0.61%)</title><rect x="61.6524%" y="197" width="0.6060%" height="15" fill="rgb(215,41,42)" fg:x="219609823559" fg:w="2158475368"/><text x="61.9024%" y="207.50"></text></g><g><title>physics_engine::verlet::Verlet::get_radius (4,548,645,815 samples, 1.28%)</title><rect x="62.2583%" y="197" width="1.2770%" height="15" fill="rgb(224,123,36)" fg:x="221768298927" fg:w="4548645815"/><text x="62.5083%" y="207.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Div&lt;f32&gt;&gt;::div (3,643,931,697 samples, 1.02%)</title><rect x="68.1580%" y="181" width="1.0230%" height="15" fill="rgb(240,125,3)" fg:x="242783343495" fg:w="3643931697"/><text x="68.4080%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (3,643,931,697 samples, 1.02%)</title><rect x="68.1580%" y="165" width="1.0230%" height="15" fill="rgb(205,98,50)" fg:x="242783343495" fg:w="3643931697"/><text x="68.4080%" y="175.50"></text></g><g><title>physics_engine::verlet::Verlet::get_velocity (20,837,511,975 samples, 5.85%)</title><rect x="63.5353%" y="197" width="5.8498%" height="15" fill="rgb(205,185,37)" fg:x="226316944742" fg:w="20837511975"/><text x="63.7853%" y="207.50">physics..</text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (727,181,525 samples, 0.20%)</title><rect x="69.1810%" y="181" width="0.2041%" height="15" fill="rgb(238,207,15)" fg:x="246427275192" fg:w="727181525"/><text x="69.4310%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (727,181,525 samples, 0.20%)</title><rect x="69.1810%" y="165" width="0.2041%" height="15" fill="rgb(213,199,42)" fg:x="246427275192" fg:w="727181525"/><text x="69.4310%" y="175.50"></text></g><g><title>physics_engine::solver::Solver::solve_collisions (124,574,720,809 samples, 34.97%)</title><rect x="38.3549%" y="213" width="34.9726%" height="15" fill="rgb(235,201,11)" fg:x="136622864917" fg:w="124574720809"/><text x="38.6049%" y="223.50">physics_engine::solver::Solver::solve_collisions</text></g><g><title>physics_engine::verlet::Verlet::set_velocity (14,024,071,838 samples, 3.94%)</title><rect x="69.3905%" y="197" width="3.9371%" height="15" fill="rgb(207,46,11)" fg:x="247173513888" fg:w="14024071838"/><text x="69.6405%" y="207.50">phys..</text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (5,233,700,962 samples, 1.47%)</title><rect x="71.8583%" y="181" width="1.4693%" height="15" fill="rgb(241,35,35)" fg:x="255963884764" fg:w="5233700962"/><text x="72.1083%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (5,233,700,962 samples, 1.47%)</title><rect x="71.8583%" y="165" width="1.4693%" height="15" fill="rgb(243,32,47)" fg:x="255963884764" fg:w="5233700962"/><text x="72.1083%" y="175.50"></text></g><g><title>physics_engine::verlet::Verlet::add_acceleration (2,317,953,799 samples, 0.65%)</title><rect x="73.3276%" y="213" width="0.6507%" height="15" fill="rgb(247,202,23)" fg:x="261197585726" fg:w="2317953799"/><text x="73.5776%" y="223.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::AddAssign&gt;::add_assign (2,317,953,799 samples, 0.65%)</title><rect x="73.3276%" y="197" width="0.6507%" height="15" fill="rgb(219,102,11)" fg:x="261197585726" fg:w="2317953799"/><text x="73.5776%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (2,317,953,799 samples, 0.65%)</title><rect x="73.3276%" y="181" width="0.6507%" height="15" fill="rgb(243,110,44)" fg:x="261197585726" fg:w="2317953799"/><text x="73.5776%" y="191.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::AddAssign&gt;::add_assign (964,894,658 samples, 0.27%)</title><rect x="74.4902%" y="197" width="0.2709%" height="15" fill="rgb(222,74,54)" fg:x="265339009887" fg:w="964894658"/><text x="74.7402%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (964,894,658 samples, 0.27%)</title><rect x="74.4902%" y="181" width="0.2709%" height="15" fill="rgb(216,99,12)" fg:x="265339009887" fg:w="964894658"/><text x="74.7402%" y="191.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (274,824,466 samples, 0.08%)</title><rect x="74.7611%" y="197" width="0.0772%" height="15" fill="rgb(226,22,26)" fg:x="266303904545" fg:w="274824466"/><text x="75.0111%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (274,824,466 samples, 0.08%)</title><rect x="74.7611%" y="181" width="0.0772%" height="15" fill="rgb(217,163,10)" fg:x="266303904545" fg:w="274824466"/><text x="75.0111%" y="191.50"></text></g><g><title>physics_engine::solver::Solver::update (183,074,217,725 samples, 51.40%)</title><rect x="23.4759%" y="229" width="51.3955%" height="15" fill="rgb(213,25,53)" fg:x="83622866348" fg:w="183074217725"/><text x="23.7259%" y="239.50">physics_engine::solver::Solver::update</text></g><g><title>physics_engine::verlet::Verlet::update_position (3,181,544,548 samples, 0.89%)</title><rect x="73.9783%" y="213" width="0.8932%" height="15" fill="rgb(252,105,26)" fg:x="263515539525" fg:w="3181544548"/><text x="74.2283%" y="223.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (118,355,062 samples, 0.03%)</title><rect x="74.8382%" y="197" width="0.0332%" height="15" fill="rgb(220,39,43)" fg:x="266578729011" fg:w="118355062"/><text x="75.0882%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (118,355,062 samples, 0.03%)</title><rect x="74.8382%" y="181" width="0.0332%" height="15" fill="rgb(229,68,48)" fg:x="266578729011" fg:w="118355062"/><text x="75.0882%" y="191.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (46,138,414 samples, 0.01%)</title><rect x="74.8805%" y="133" width="0.0130%" height="15" fill="rgb(252,8,32)" fg:x="266729180361" fg:w="46138414"/><text x="75.1305%" y="143.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (43,129,387 samples, 0.01%)</title><rect x="74.8813%" y="117" width="0.0121%" height="15" fill="rgb(223,20,43)" fg:x="266732189388" fg:w="43129387"/><text x="75.1313%" y="127.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (39,117,351 samples, 0.01%)</title><rect x="74.8824%" y="101" width="0.0110%" height="15" fill="rgb(229,81,49)" fg:x="266736201424" fg:w="39117351"/><text x="75.1324%" y="111.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (39,117,351 samples, 0.01%)</title><rect x="74.8824%" y="85" width="0.0110%" height="15" fill="rgb(236,28,36)" fg:x="266736201424" fg:w="39117351"/><text x="75.1324%" y="95.50"></text></g><g><title>std::io::Write::write_fmt (110,330,990 samples, 0.03%)</title><rect x="74.8754%" y="165" width="0.0310%" height="15" fill="rgb(249,185,26)" fg:x="266711126199" fg:w="110330990"/><text x="75.1254%" y="175.50"></text></g><g><title>core::fmt::write (110,330,990 samples, 0.03%)</title><rect x="74.8754%" y="149" width="0.0310%" height="15" fill="rgb(249,174,33)" fg:x="266711126199" fg:w="110330990"/><text x="75.1254%" y="159.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (119,358,071 samples, 0.03%)</title><rect x="74.8743%" y="197" width="0.0335%" height="15" fill="rgb(233,201,37)" fg:x="266707114163" fg:w="119358071"/><text x="75.1243%" y="207.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (119,358,071 samples, 0.03%)</title><rect x="74.8743%" y="181" width="0.0335%" height="15" fill="rgb(221,78,26)" fg:x="266707114163" fg:w="119358071"/><text x="75.1243%" y="191.50"></text></g><g><title>std::io::stdio::_print (127,382,143 samples, 0.04%)</title><rect x="74.8743%" y="229" width="0.0358%" height="15" fill="rgb(250,127,30)" fg:x="266707114163" fg:w="127382143"/><text x="75.1243%" y="239.50"></text></g><g><title>std::io::stdio::print_to (127,382,143 samples, 0.04%)</title><rect x="74.8743%" y="213" width="0.0358%" height="15" fill="rgb(230,49,44)" fg:x="266707114163" fg:w="127382143"/><text x="75.1243%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (2,427,281,780 samples, 0.68%)</title><rect x="76.2428%" y="181" width="0.6814%" height="15" fill="rgb(229,67,23)" fg:x="271581737903" fg:w="2427281780"/><text x="76.4928%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (3,452,356,978 samples, 0.97%)</title><rect x="78.4498%" y="133" width="0.9692%" height="15" fill="rgb(249,83,47)" fg:x="279443322445" fg:w="3452356978"/><text x="78.6998%" y="143.50"></text></g><g><title>core::cmp::PartialOrd::ge (3,452,356,978 samples, 0.97%)</title><rect x="78.4498%" y="117" width="0.9692%" height="15" fill="rgb(215,43,3)" fg:x="279443322445" fg:w="3452356978"/><text x="78.6998%" y="127.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (3,362,086,168 samples, 0.94%)</title><rect x="78.4751%" y="101" width="0.9439%" height="15" fill="rgb(238,154,13)" fg:x="279533593255" fg:w="3362086168"/><text x="78.7251%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (3,361,083,159 samples, 0.94%)</title><rect x="78.4754%" y="85" width="0.9436%" height="15" fill="rgb(219,56,2)" fg:x="279534596264" fg:w="3361083159"/><text x="78.7254%" y="95.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (11,404,212,330 samples, 3.20%)</title><rect x="76.2428%" y="213" width="3.2016%" height="15" fill="rgb(233,0,4)" fg:x="271581737903" fg:w="11404212330"/><text x="76.4928%" y="223.50">&lt;st..</text></g><g><title>std::time::Instant::duration_since (11,404,212,330 samples, 3.20%)</title><rect x="76.2428%" y="197" width="3.2016%" height="15" fill="rgb(235,30,7)" fg:x="271581737903" fg:w="11404212330"/><text x="76.4928%" y="207.50">std..</text></g><g><title>std::time::Instant::checked_duration_since (8,976,930,550 samples, 2.52%)</title><rect x="76.9242%" y="181" width="2.5201%" height="15" fill="rgb(250,79,13)" fg:x="274009019683" fg:w="8976930550"/><text x="77.1742%" y="191.50">st..</text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (8,976,930,550 samples, 2.52%)</title><rect x="76.9242%" y="165" width="2.5201%" height="15" fill="rgb(211,146,34)" fg:x="274009019683" fg:w="8976930550"/><text x="77.1742%" y="175.50">st..</text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (8,321,965,673 samples, 2.34%)</title><rect x="77.1081%" y="149" width="2.3363%" height="15" fill="rgb(228,22,38)" fg:x="274663984560" fg:w="8321965673"/><text x="77.3581%" y="159.50">s..</text></g><g><title>core::time::Duration::new (90,270,810 samples, 0.03%)</title><rect x="79.4190%" y="133" width="0.0253%" height="15" fill="rgb(235,168,5)" fg:x="282895679423" fg:w="90270810"/><text x="79.6690%" y="143.50"></text></g><g><title>clock_gettime (70,789,366,193 samples, 19.87%)</title><rect x="79.9636%" y="165" width="19.8731%" height="15" fill="rgb(221,155,16)" fg:x="284835498829" fg:w="70789366193"/><text x="80.2136%" y="175.50">clock_gettime</text></g><g><title>__vdso_clock_gettime (69,583,749,375 samples, 19.53%)</title><rect x="80.3020%" y="149" width="19.5347%" height="15" fill="rgb(215,215,53)" fg:x="286041115647" fg:w="69583749375"/><text x="80.5520%" y="159.50">__vdso_clock_gettime</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (512,537,599 samples, 0.14%)</title><rect x="99.8367%" y="165" width="0.1439%" height="15" fill="rgb(223,4,10)" fg:x="355624865022" fg:w="512537599"/><text x="100.0867%" y="175.50"></text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw (356,128,375,540 samples, 99.98%)</title><rect x="0.0034%" y="309" width="99.9780%" height="15" fill="rgb(234,103,6)" fg:x="12036108" fg:w="356128375540"/><text x="0.2534%" y="319.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw</text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::maybe_unwind (356,128,375,540 samples, 99.98%)</title><rect x="0.0034%" y="293" width="99.9780%" height="15" fill="rgb(227,97,0)" fg:x="12036108" fg:w="356128375540"/><text x="0.2534%" y="303.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::maybe_unwind</text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::{{closure}} (356,128,375,540 samples, 99.98%)</title><rect x="0.0034%" y="277" width="99.9780%" height="15" fill="rgb(234,150,53)" fg:x="12036108" fg:w="356128375540"/><text x="0.2534%" y="287.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::{{closure}}</text></g><g><title>macroquad::exec::resume (356,128,375,540 samples, 99.98%)</title><rect x="0.0034%" y="261" width="99.9780%" height="15" fill="rgb(228,201,54)" fg:x="12036108" fg:w="356128375540"/><text x="0.2534%" y="271.50">macroquad::exec::resume</text></g><g><title>physics_engine::amain::{{closure}} (356,128,375,540 samples, 99.98%)</title><rect x="0.0034%" y="245" width="99.9780%" height="15" fill="rgb(222,22,37)" fg:x="12036108" fg:w="356128375540"/><text x="0.2534%" y="255.50">physics_engine::amain::{{closure}}</text></g><g><title>std::time::Instant::elapsed (89,305,915,342 samples, 25.07%)</title><rect x="74.9100%" y="229" width="25.0714%" height="15" fill="rgb(237,53,32)" fg:x="266834496306" fg:w="89305915342"/><text x="75.1600%" y="239.50">std::time::Instant::elapsed</text></g><g><title>std::time::Instant::now (73,154,461,415 samples, 20.54%)</title><rect x="79.4443%" y="213" width="20.5371%" height="15" fill="rgb(233,25,53)" fg:x="282985950233" fg:w="73154461415"/><text x="79.6943%" y="223.50">std::time::Instant::now</text></g><g><title>std::sys::pal::unix::time::Instant::now (73,154,461,415 samples, 20.54%)</title><rect x="79.4443%" y="197" width="20.5371%" height="15" fill="rgb(210,40,34)" fg:x="282985950233" fg:w="73154461415"/><text x="79.6943%" y="207.50">std::sys::pal::unix::time::Insta..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (73,153,458,406 samples, 20.54%)</title><rect x="79.4446%" y="181" width="20.5368%" height="15" fill="rgb(241,220,44)" fg:x="282986953242" fg:w="73153458406"/><text x="79.6946%" y="191.50">std::sys::pal::unix::time::Times..</text></g><g><title>[unknown] (356,157,462,801 samples, 99.99%)</title><rect x="0.0000%" y="405" width="99.9862%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="356157462801"/><text x="0.2500%" y="415.50">[unknown]</text></g><g><title>macroquad::Window::new (356,146,429,702 samples, 99.98%)</title><rect x="0.0031%" y="389" width="99.9831%" height="15" fill="rgb(210,56,17)" fg:x="11033099" fg:w="356146429702"/><text x="0.2531%" y="399.50">macroquad::Window::new</text></g><g><title>macroquad::Window::from_config (356,146,429,702 samples, 99.98%)</title><rect x="0.0031%" y="373" width="99.9831%" height="15" fill="rgb(224,130,29)" fg:x="11033099" fg:w="356146429702"/><text x="0.2531%" y="383.50">macroquad::Window::from_config</text></g><g><title>miniquad::start (356,146,429,702 samples, 99.98%)</title><rect x="0.0031%" y="357" width="99.9831%" height="15" fill="rgb(235,212,8)" fg:x="11033099" fg:w="356146429702"/><text x="0.2531%" y="367.50">miniquad::start</text></g><g><title>miniquad::native::linux_x11::run (356,146,429,702 samples, 99.98%)</title><rect x="0.0031%" y="341" width="99.9831%" height="15" fill="rgb(223,33,50)" fg:x="11033099" fg:w="356146429702"/><text x="0.2531%" y="351.50">miniquad::native::linux_x11::run</text></g><g><title>miniquad::native::linux_x11::glx_main_loop (356,145,426,693 samples, 99.98%)</title><rect x="0.0034%" y="325" width="99.9828%" height="15" fill="rgb(219,149,13)" fg:x="12036108" fg:w="356145426693"/><text x="0.2534%" y="335.50">miniquad::native::linux_x11::glx_main_loop</text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (45,135,405 samples, 0.01%)</title><rect x="99.9865%" y="389" width="0.0127%" height="15" fill="rgb(250,156,29)" fg:x="356158465810" fg:w="45135405"/><text x="100.2365%" y="399.50"></text></g><g><title>std::time::Instant::duration_since (45,135,405 samples, 0.01%)</title><rect x="99.9865%" y="373" width="0.0127%" height="15" fill="rgb(216,193,19)" fg:x="356158465810" fg:w="45135405"/><text x="100.2365%" y="383.50"></text></g><g><title>std::time::Instant::checked_duration_since (45,135,405 samples, 0.01%)</title><rect x="99.9865%" y="357" width="0.0127%" height="15" fill="rgb(216,135,14)" fg:x="356158465810" fg:w="45135405"/><text x="100.2365%" y="367.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (45,135,405 samples, 0.01%)</title><rect x="99.9865%" y="341" width="0.0127%" height="15" fill="rgb(241,47,5)" fg:x="356158465810" fg:w="45135405"/><text x="100.2365%" y="351.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (45,135,405 samples, 0.01%)</title><rect x="99.9865%" y="325" width="0.0127%" height="15" fill="rgb(233,42,35)" fg:x="356158465810" fg:w="45135405"/><text x="100.2365%" y="335.50"></text></g><g><title>all (356,206,610,242 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="356206610242"/><text x="0.2500%" y="447.50"></text></g><g><title>physics_engine (356,206,610,242 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="356206610242"/><text x="0.2500%" y="431.50">physics_engine</text></g><g><title>std::time::Instant::elapsed (48,144,432 samples, 0.01%)</title><rect x="99.9865%" y="405" width="0.0135%" height="15" fill="rgb(254,173,49)" fg:x="356158465810" fg:w="48144432"/><text x="100.2365%" y="415.50"></text></g></svg></svg>