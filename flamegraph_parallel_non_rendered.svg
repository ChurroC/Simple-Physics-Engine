<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="318535598220"><g><title>__libc_free (103,309,927 samples, 0.03%)</title><rect x="0.0038%" y="213" width="0.0324%" height="15" fill="rgb(227,0,7)" fg:x="12036108" fg:w="103309927"/><text x="0.2538%" y="223.50"></text></g><g><title>[libc.so.6] (66,198,594 samples, 0.02%)</title><rect x="0.0154%" y="197" width="0.0208%" height="15" fill="rgb(217,0,24)" fg:x="49147441" fg:w="66198594"/><text x="0.2654%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (107,321,963 samples, 0.03%)</title><rect x="0.0038%" y="245" width="0.0337%" height="15" fill="rgb(221,193,54)" fg:x="12036108" fg:w="107321963"/><text x="0.2538%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (107,321,963 samples, 0.03%)</title><rect x="0.0038%" y="229" width="0.0337%" height="15" fill="rgb(248,212,6)" fg:x="12036108" fg:w="107321963"/><text x="0.2538%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (111,333,999 samples, 0.03%)</title><rect x="0.0028%" y="261" width="0.0350%" height="15" fill="rgb(208,68,35)" fg:x="9027081" fg:w="111333999"/><text x="0.2528%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpsc::Sender&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt; (88,264,792 samples, 0.03%)</title><rect x="0.0923%" y="229" width="0.0277%" height="15" fill="rgb(232,128,0)" fg:x="293881637" fg:w="88264792"/><text x="0.3423%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpmc::Sender&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt; (88,264,792 samples, 0.03%)</title><rect x="0.0923%" y="213" width="0.0277%" height="15" fill="rgb(207,160,47)" fg:x="293881637" fg:w="88264792"/><text x="0.3423%" y="223.50"></text></g><g><title>&lt;std::sync::mpmc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop (88,264,792 samples, 0.03%)</title><rect x="0.0923%" y="197" width="0.0277%" height="15" fill="rgb(228,23,34)" fg:x="293881637" fg:w="88264792"/><text x="0.3423%" y="207.50"></text></g><g><title>std::sync::mpmc::counter::Sender&lt;C&gt;::release (68,204,612 samples, 0.02%)</title><rect x="0.0986%" y="181" width="0.0214%" height="15" fill="rgb(218,30,26)" fg:x="313941817" fg:w="68204612"/><text x="0.3486%" y="191.50"></text></g><g><title>&lt;std::sync::mpmc::Sender&lt;T&gt; as core::ops::drop::Drop&gt;::drop::{{closure}} (50,150,450 samples, 0.02%)</title><rect x="0.1042%" y="165" width="0.0157%" height="15" fill="rgb(220,122,19)" fg:x="331995979" fg:w="50150450"/><text x="0.3542%" y="175.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::disconnect_senders (50,150,450 samples, 0.02%)</title><rect x="0.1042%" y="149" width="0.0157%" height="15" fill="rgb(250,228,42)" fg:x="331995979" fg:w="50150450"/><text x="0.3542%" y="159.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::disconnect (48,144,432 samples, 0.02%)</title><rect x="0.1049%" y="133" width="0.0151%" height="15" fill="rgb(240,193,28)" fg:x="334001997" fg:w="48144432"/><text x="0.3549%" y="143.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (177,532,593 samples, 0.06%)</title><rect x="2.7917%" y="213" width="0.0557%" height="15" fill="rgb(216,20,37)" fg:x="8892677794" fg:w="177532593"/><text x="3.0417%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (177,532,593 samples, 0.06%)</title><rect x="2.7917%" y="197" width="0.0557%" height="15" fill="rgb(206,188,39)" fg:x="8892677794" fg:w="177532593"/><text x="3.0417%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (177,532,593 samples, 0.06%)</title><rect x="2.7917%" y="181" width="0.0557%" height="15" fill="rgb(217,207,13)" fg:x="8892677794" fg:w="177532593"/><text x="3.0417%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,723,169,462 samples, 0.54%)</title><rect x="2.8475%" y="197" width="0.5410%" height="15" fill="rgb(231,73,38)" fg:x="9070210387" fg:w="1723169462"/><text x="3.0975%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (1,723,169,462 samples, 0.54%)</title><rect x="2.8475%" y="181" width="0.5410%" height="15" fill="rgb(225,20,46)" fg:x="9070210387" fg:w="1723169462"/><text x="3.0975%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (383,149,438 samples, 0.12%)</title><rect x="3.2682%" y="165" width="0.1203%" height="15" fill="rgb(210,31,41)" fg:x="10410230411" fg:w="383149438"/><text x="3.5182%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (383,149,438 samples, 0.12%)</title><rect x="3.2682%" y="149" width="0.1203%" height="15" fill="rgb(221,200,47)" fg:x="10410230411" fg:w="383149438"/><text x="3.5182%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (383,149,438 samples, 0.12%)</title><rect x="3.2682%" y="133" width="0.1203%" height="15" fill="rgb(226,26,5)" fg:x="10410230411" fg:w="383149438"/><text x="3.5182%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (383,149,438 samples, 0.12%)</title><rect x="3.2682%" y="117" width="0.1203%" height="15" fill="rgb(249,33,26)" fg:x="10410230411" fg:w="383149438"/><text x="3.5182%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,528,585,689 samples, 0.79%)</title><rect x="2.8475%" y="213" width="0.7938%" height="15" fill="rgb(235,183,28)" fg:x="9070210387" fg:w="2528585689"/><text x="3.0975%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (805,416,227 samples, 0.25%)</title><rect x="3.3884%" y="197" width="0.2528%" height="15" fill="rgb(221,5,38)" fg:x="10793379849" fg:w="805416227"/><text x="3.6384%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (805,416,227 samples, 0.25%)</title><rect x="3.3884%" y="181" width="0.2528%" height="15" fill="rgb(247,18,42)" fg:x="10793379849" fg:w="805416227"/><text x="3.6384%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,428,284,789 samples, 0.76%)</title><rect x="3.6413%" y="213" width="0.7623%" height="15" fill="rgb(241,131,45)" fg:x="11598796076" fg:w="2428284789"/><text x="3.8913%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,424,272,753 samples, 0.76%)</title><rect x="3.6425%" y="197" width="0.7611%" height="15" fill="rgb(249,31,29)" fg:x="11602808112" fg:w="2424272753"/><text x="3.8925%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (754,262,768 samples, 0.24%)</title><rect x="4.4036%" y="213" width="0.2368%" height="15" fill="rgb(225,111,53)" fg:x="14027080865" fg:w="754262768"/><text x="4.6536%" y="223.50"></text></g><g><title>[libc.so.6] (2,127,382,089 samples, 0.67%)</title><rect x="5.9560%" y="69" width="0.6679%" height="15" fill="rgb(238,160,17)" fg:x="18971915235" fg:w="2127382089"/><text x="6.2060%" y="79.50"></text></g><g><title>[libc.so.6] (1,466,399,158 samples, 0.46%)</title><rect x="6.1635%" y="53" width="0.4604%" height="15" fill="rgb(214,148,48)" fg:x="19632898166" fg:w="1466399158"/><text x="6.4135%" y="63.50"></text></g><g><title>[libc.so.6] (111,333,999 samples, 0.03%)</title><rect x="6.5889%" y="37" width="0.0350%" height="15" fill="rgb(232,36,49)" fg:x="20987963325" fg:w="111333999"/><text x="6.8389%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2,632,898,625 samples, 0.83%)</title><rect x="5.7982%" y="133" width="0.8266%" height="15" fill="rgb(209,103,24)" fg:x="18469407726" fg:w="2632898625"/><text x="6.0482%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2,632,898,625 samples, 0.83%)</title><rect x="5.7982%" y="117" width="0.8266%" height="15" fill="rgb(229,88,8)" fg:x="18469407726" fg:w="2632898625"/><text x="6.0482%" y="127.50"></text></g><g><title>alloc::alloc::realloc (2,631,895,616 samples, 0.83%)</title><rect x="5.7985%" y="101" width="0.8262%" height="15" fill="rgb(213,181,19)" fg:x="18470410735" fg:w="2631895616"/><text x="6.0485%" y="111.50"></text></g><g><title>realloc (2,606,820,391 samples, 0.82%)</title><rect x="5.8064%" y="85" width="0.8184%" height="15" fill="rgb(254,191,54)" fg:x="18495485960" fg:w="2606820391"/><text x="6.0564%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,057,171,432 samples, 0.96%)</title><rect x="5.7919%" y="149" width="0.9598%" height="15" fill="rgb(241,83,37)" fg:x="18449347546" fg:w="3057171432"/><text x="6.0419%" y="159.50"></text></g><g><title>malloc (374,122,357 samples, 0.12%)</title><rect x="6.6342%" y="133" width="0.1175%" height="15" fill="rgb(233,36,39)" fg:x="21132396621" fg:w="374122357"/><text x="6.8842%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3,126,379,053 samples, 0.98%)</title><rect x="5.7762%" y="197" width="0.9815%" height="15" fill="rgb(226,3,54)" fg:x="18399197096" fg:w="3126379053"/><text x="6.0262%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (3,097,291,792 samples, 0.97%)</title><rect x="5.7853%" y="181" width="0.9724%" height="15" fill="rgb(245,192,40)" fg:x="18428284357" fg:w="3097291792"/><text x="6.0353%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (3,097,291,792 samples, 0.97%)</title><rect x="5.7853%" y="165" width="0.9724%" height="15" fill="rgb(238,167,29)" fg:x="18428284357" fg:w="3097291792"/><text x="6.0353%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (37,111,333 samples, 0.01%)</title><rect x="6.7577%" y="197" width="0.0117%" height="15" fill="rgb(232,182,51)" fg:x="21525576149" fg:w="37111333"/><text x="7.0077%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (37,111,333 samples, 0.01%)</title><rect x="6.7577%" y="181" width="0.0117%" height="15" fill="rgb(231,60,39)" fg:x="21525576149" fg:w="37111333"/><text x="7.0077%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (37,111,333 samples, 0.01%)</title><rect x="6.7577%" y="165" width="0.0117%" height="15" fill="rgb(208,69,12)" fg:x="21525576149" fg:w="37111333"/><text x="7.0077%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (37,111,333 samples, 0.01%)</title><rect x="6.7577%" y="149" width="0.0117%" height="15" fill="rgb(235,93,37)" fg:x="21525576149" fg:w="37111333"/><text x="7.0077%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10,028,083,982 samples, 3.15%)</title><rect x="4.6404%" y="213" width="3.1482%" height="15" fill="rgb(213,116,39)" fg:x="14781343633" fg:w="10028083982"/><text x="4.8904%" y="223.50">all..</text></g><g><title>core::ptr::write (3,246,740,133 samples, 1.02%)</title><rect x="6.7693%" y="197" width="1.0193%" height="15" fill="rgb(222,207,29)" fg:x="21562687482" fg:w="3246740133"/><text x="7.0193%" y="207.50"></text></g><g><title>core::cmp::Ord::max (393,179,528 samples, 0.12%)</title><rect x="7.7886%" y="213" width="0.1234%" height="15" fill="rgb(206,96,30)" fg:x="24809427615" fg:w="393179528"/><text x="8.0386%" y="223.50"></text></g><g><title>core::cmp::max_by (393,179,528 samples, 0.12%)</title><rect x="7.7886%" y="197" width="0.1234%" height="15" fill="rgb(218,138,4)" fg:x="24809427615" fg:w="393179528"/><text x="8.0386%" y="207.50"></text></g><g><title>core::cmp::Ord::min (11,544,633,590 samples, 3.62%)</title><rect x="7.9120%" y="213" width="3.6243%" height="15" fill="rgb(250,191,14)" fg:x="25202607143" fg:w="11544633590"/><text x="8.1620%" y="223.50">core..</text></g><g><title>core::cmp::min_by (11,544,633,590 samples, 3.62%)</title><rect x="7.9120%" y="197" width="3.6243%" height="15" fill="rgb(239,60,40)" fg:x="25202607143" fg:w="11544633590"/><text x="8.1620%" y="207.50">core..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (75,225,675 samples, 0.02%)</title><rect x="11.6109%" y="181" width="0.0236%" height="15" fill="rgb(206,27,48)" fg:x="36984953866" fg:w="75225675"/><text x="11.8609%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (75,225,675 samples, 0.02%)</title><rect x="11.6109%" y="165" width="0.0236%" height="15" fill="rgb(225,35,8)" fg:x="36984953866" fg:w="75225675"/><text x="11.8609%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (958,876,604 samples, 0.30%)</title><rect x="11.5363%" y="213" width="0.3010%" height="15" fill="rgb(250,213,24)" fg:x="36747240733" fg:w="958876604"/><text x="11.7863%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (958,876,604 samples, 0.30%)</title><rect x="11.5363%" y="197" width="0.3010%" height="15" fill="rgb(247,123,22)" fg:x="36747240733" fg:w="958876604"/><text x="11.7863%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (645,937,796 samples, 0.20%)</title><rect x="11.6345%" y="181" width="0.2028%" height="15" fill="rgb(231,138,38)" fg:x="37060179541" fg:w="645937796"/><text x="11.8845%" y="191.50"></text></g><g><title>physics_engine::solver::Solver::find_collisions_space_partitioning_parallel::{{closure}} (37,368,103,304 samples, 11.73%)</title><rect x="0.1206%" y="229" width="11.7312%" height="15" fill="rgb(231,145,46)" fg:x="384152447" fg:w="37368103304"/><text x="0.3706%" y="239.50">physics_engine::s..</text></g><g><title>core::ptr::drop_in_place&lt;physics_engine::solver::Solver::find_collisions_space_partitioning_parallel::{{closure}}&gt; (46,138,414 samples, 0.01%)</title><rect x="11.8373%" y="213" width="0.0145%" height="15" fill="rgb(251,118,11)" fg:x="37706117337" fg:w="46138414"/><text x="12.0873%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt;&gt; (46,138,414 samples, 0.01%)</title><rect x="11.8373%" y="197" width="0.0145%" height="15" fill="rgb(217,147,25)" fg:x="37706117337" fg:w="46138414"/><text x="12.0873%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46,138,414 samples, 0.01%)</title><rect x="11.8373%" y="181" width="0.0145%" height="15" fill="rgb(247,81,37)" fg:x="37706117337" fg:w="46138414"/><text x="12.0873%" y="191.50"></text></g><g><title>[libc.so.6] (46,138,414 samples, 0.01%)</title><rect x="11.9088%" y="53" width="0.0145%" height="15" fill="rgb(209,12,38)" fg:x="37933800380" fg:w="46138414"/><text x="12.1588%" y="63.50"></text></g><g><title>__libc_calloc (181,544,629 samples, 0.06%)</title><rect x="11.9233%" y="53" width="0.0570%" height="15" fill="rgb(227,1,9)" fg:x="37979938794" fg:w="181544629"/><text x="12.1733%" y="63.50"></text></g><g><title>[libc.so.6] (108,324,972 samples, 0.03%)</title><rect x="11.9463%" y="37" width="0.0340%" height="15" fill="rgb(248,47,43)" fg:x="38053158451" fg:w="108324972"/><text x="12.1963%" y="47.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::start_send (339,017,042 samples, 0.11%)</title><rect x="11.8761%" y="181" width="0.1064%" height="15" fill="rgb(221,10,30)" fg:x="37829487444" fg:w="339017042"/><text x="12.1261%" y="191.50"></text></g><g><title>std::sync::mpmc::list::Block&lt;T&gt;::new (238,716,142 samples, 0.07%)</title><rect x="11.9076%" y="165" width="0.0749%" height="15" fill="rgb(210,229,1)" fg:x="37929788344" fg:w="238716142"/><text x="12.1576%" y="175.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_zeroed (238,716,142 samples, 0.07%)</title><rect x="11.9076%" y="149" width="0.0749%" height="15" fill="rgb(222,148,37)" fg:x="37929788344" fg:w="238716142"/><text x="12.1576%" y="159.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_zeroed_in (238,716,142 samples, 0.07%)</title><rect x="11.9076%" y="133" width="0.0749%" height="15" fill="rgb(234,67,33)" fg:x="37929788344" fg:w="238716142"/><text x="12.1576%" y="143.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_zeroed_in (237,713,133 samples, 0.07%)</title><rect x="11.9079%" y="117" width="0.0746%" height="15" fill="rgb(247,98,35)" fg:x="37930791353" fg:w="237713133"/><text x="12.1579%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (237,713,133 samples, 0.07%)</title><rect x="11.9079%" y="101" width="0.0746%" height="15" fill="rgb(247,138,52)" fg:x="37930791353" fg:w="237713133"/><text x="12.1579%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (237,713,133 samples, 0.07%)</title><rect x="11.9079%" y="85" width="0.0746%" height="15" fill="rgb(213,79,30)" fg:x="37930791353" fg:w="237713133"/><text x="12.1579%" y="95.50"></text></g><g><title>alloc::alloc::alloc_zeroed (236,710,124 samples, 0.07%)</title><rect x="11.9082%" y="69" width="0.0743%" height="15" fill="rgb(246,177,23)" fg:x="37931794362" fg:w="236710124"/><text x="12.1582%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (55,165,495 samples, 0.02%)</title><rect x="12.0011%" y="133" width="0.0173%" height="15" fill="rgb(230,62,27)" fg:x="38227682017" fg:w="55165495"/><text x="12.2511%" y="143.50"></text></g><g><title>std::sync::mpmc::waker::Waker::try_select::{{closure}} (55,165,495 samples, 0.02%)</title><rect x="12.0011%" y="117" width="0.0173%" height="15" fill="rgb(216,154,8)" fg:x="38227682017" fg:w="55165495"/><text x="12.2511%" y="127.50"></text></g><g><title>std::sync::mpmc::context::Context::unpark (40,120,360 samples, 0.01%)</title><rect x="12.0058%" y="101" width="0.0126%" height="15" fill="rgb(244,35,45)" fg:x="38242727152" fg:w="40120360"/><text x="12.2558%" y="111.50"></text></g><g><title>std::thread::Thread::unpark (40,120,360 samples, 0.01%)</title><rect x="12.0058%" y="85" width="0.0126%" height="15" fill="rgb(251,115,12)" fg:x="38242727152" fg:w="40120360"/><text x="12.2558%" y="95.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::unpark (40,120,360 samples, 0.01%)</title><rect x="12.0058%" y="69" width="0.0126%" height="15" fill="rgb(240,54,50)" fg:x="38242727152" fg:w="40120360"/><text x="12.2558%" y="79.50"></text></g><g><title>std::sync::mpmc::waker::Waker::try_select (74,222,666 samples, 0.02%)</title><rect x="12.0011%" y="149" width="0.0233%" height="15" fill="rgb(233,84,52)" fg:x="38227682017" fg:w="74222666"/><text x="12.2511%" y="159.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (38,299,898,665 samples, 12.02%)</title><rect x="0.0025%" y="277" width="12.0237%" height="15" fill="rgb(207,117,47)" fg:x="8024072" fg:w="38299898665"/><text x="0.2525%" y="287.50">&lt;alloc::boxed::Box..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (38,187,561,657 samples, 11.99%)</title><rect x="0.0378%" y="261" width="11.9885%" height="15" fill="rgb(249,43,39)" fg:x="120361080" fg:w="38187561657"/><text x="0.2878%" y="271.50">core::ops::functio..</text></g><g><title>physics_engine::ThreadPool::execute::{{closure}} (38,183,549,621 samples, 11.99%)</title><rect x="0.0390%" y="245" width="11.9872%" height="15" fill="rgb(209,38,44)" fg:x="124373116" fg:w="38183549621"/><text x="0.2890%" y="255.50">physics_engine::Th..</text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (555,666,986 samples, 0.17%)</title><rect x="11.8518%" y="229" width="0.1744%" height="15" fill="rgb(236,212,23)" fg:x="37752255751" fg:w="555666986"/><text x="12.1018%" y="239.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (555,666,986 samples, 0.17%)</title><rect x="11.8518%" y="213" width="0.1744%" height="15" fill="rgb(242,79,21)" fg:x="37752255751" fg:w="555666986"/><text x="12.1018%" y="223.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (499,498,482 samples, 0.16%)</title><rect x="11.8695%" y="197" width="0.1568%" height="15" fill="rgb(211,96,35)" fg:x="37808424255" fg:w="499498482"/><text x="12.1195%" y="207.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::write (139,418,251 samples, 0.04%)</title><rect x="11.9825%" y="181" width="0.0438%" height="15" fill="rgb(253,215,40)" fg:x="38168504486" fg:w="139418251"/><text x="12.2325%" y="191.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::notify (132,397,188 samples, 0.04%)</title><rect x="11.9847%" y="165" width="0.0416%" height="15" fill="rgb(211,81,21)" fg:x="38175525549" fg:w="132397188"/><text x="12.2347%" y="175.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::wake (32,096,288 samples, 0.01%)</title><rect x="12.0341%" y="229" width="0.0101%" height="15" fill="rgb(208,190,38)" fg:x="38332997962" fg:w="32096288"/><text x="12.2841%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::poison::mutex::MutexGuard&lt;std::sync::mpsc::Receiver&lt;physics_engine::Message&gt;&gt;&gt; (108,324,972 samples, 0.03%)</title><rect x="12.0263%" y="277" width="0.0340%" height="15" fill="rgb(235,213,38)" fg:x="38307922737" fg:w="108324972"/><text x="12.2763%" y="287.50"></text></g><g><title>&lt;std::sync::poison::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108,324,972 samples, 0.03%)</title><rect x="12.0263%" y="261" width="0.0340%" height="15" fill="rgb(237,122,38)" fg:x="38307922737" fg:w="108324972"/><text x="12.2763%" y="271.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (106,318,954 samples, 0.03%)</title><rect x="12.0269%" y="245" width="0.0334%" height="15" fill="rgb(244,218,35)" fg:x="38309928755" fg:w="106318954"/><text x="12.2769%" y="255.50"></text></g><g><title>syscall (51,153,459 samples, 0.02%)</title><rect x="12.0442%" y="229" width="0.0161%" height="15" fill="rgb(240,68,47)" fg:x="38365094250" fg:w="51153459"/><text x="12.2942%" y="239.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (145,436,305 samples, 0.05%)</title><rect x="12.0896%" y="117" width="0.0457%" height="15" fill="rgb(210,16,53)" fg:x="38509527546" fg:w="145436305"/><text x="12.3396%" y="127.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (77,231,693 samples, 0.02%)</title><rect x="12.1110%" y="101" width="0.0242%" height="15" fill="rgb(235,124,12)" fg:x="38577732158" fg:w="77231693"/><text x="12.3610%" y="111.50"></text></g><g><title>syscall (55,165,495 samples, 0.02%)</title><rect x="12.1179%" y="85" width="0.0173%" height="15" fill="rgb(224,169,11)" fg:x="38599798356" fg:w="55165495"/><text x="12.3679%" y="95.50"></text></g><g><title>std::sync::mpmc::context::Context::wait_until (179,538,611 samples, 0.06%)</title><rect x="12.0792%" y="149" width="0.0564%" height="15" fill="rgb(250,166,2)" fg:x="38476428249" fg:w="179538611"/><text x="12.3292%" y="159.50"></text></g><g><title>std::thread::Thread::park (150,451,350 samples, 0.05%)</title><rect x="12.0883%" y="133" width="0.0472%" height="15" fill="rgb(242,216,29)" fg:x="38505515510" fg:w="150451350"/><text x="12.3383%" y="143.50"></text></g><g><title>std::sync::mpmc::context::Context::with (248,746,232 samples, 0.08%)</title><rect x="12.0650%" y="229" width="0.0781%" height="15" fill="rgb(230,116,27)" fg:x="38431292844" fg:w="248746232"/><text x="12.3150%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (248,746,232 samples, 0.08%)</title><rect x="12.0650%" y="213" width="0.0781%" height="15" fill="rgb(228,99,48)" fg:x="38431292844" fg:w="248746232"/><text x="12.3150%" y="223.50"></text></g><g><title>std::sync::mpmc::context::Context::with::{{closure}} (234,704,106 samples, 0.07%)</title><rect x="12.0694%" y="197" width="0.0737%" height="15" fill="rgb(253,11,6)" fg:x="38445334970" fg:w="234704106"/><text x="12.3194%" y="207.50"></text></g><g><title>std::sync::mpmc::context::Context::with::{{closure}} (207,622,863 samples, 0.07%)</title><rect x="12.0779%" y="181" width="0.0652%" height="15" fill="rgb(247,143,39)" fg:x="38472416213" fg:w="207622863"/><text x="12.3279%" y="191.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv::{{closure}} (207,622,863 samples, 0.07%)</title><rect x="12.0779%" y="165" width="0.0652%" height="15" fill="rgb(236,97,10)" fg:x="38472416213" fg:w="207622863"/><text x="12.3279%" y="175.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::read (94,282,846 samples, 0.03%)</title><rect x="12.1431%" y="229" width="0.0296%" height="15" fill="rgb(233,208,19)" fg:x="38680039076" fg:w="94282846"/><text x="12.3931%" y="239.50"></text></g><g><title>std::sync::mpmc::list::Slot&lt;T&gt;::wait_write (39,117,351 samples, 0.01%)</title><rect x="12.1604%" y="213" width="0.0123%" height="15" fill="rgb(216,164,2)" fg:x="38735204571" fg:w="39117351"/><text x="12.4104%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (44,132,396 samples, 0.01%)</title><rect x="12.1865%" y="213" width="0.0139%" height="15" fill="rgb(220,129,5)" fg:x="38818454318" fg:w="44132396"/><text x="12.4365%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (44,132,396 samples, 0.01%)</title><rect x="12.1865%" y="197" width="0.0139%" height="15" fill="rgb(242,17,10)" fg:x="38818454318" fg:w="44132396"/><text x="12.4365%" y="207.50"></text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (456,369,095 samples, 0.14%)</title><rect x="12.0603%" y="277" width="0.1433%" height="15" fill="rgb(242,107,0)" fg:x="38416247709" fg:w="456369095"/><text x="12.3103%" y="287.50"></text></g><g><title>std::sync::mpmc::Receiver&lt;T&gt;::recv (456,369,095 samples, 0.14%)</title><rect x="12.0603%" y="261" width="0.1433%" height="15" fill="rgb(251,28,31)" fg:x="38416247709" fg:w="456369095"/><text x="12.3103%" y="271.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (451,354,050 samples, 0.14%)</title><rect x="12.0618%" y="245" width="0.1417%" height="15" fill="rgb(233,223,10)" fg:x="38421262754" fg:w="451354050"/><text x="12.3118%" y="255.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::start_recv (98,294,882 samples, 0.03%)</title><rect x="12.1727%" y="229" width="0.0309%" height="15" fill="rgb(215,21,27)" fg:x="38774321922" fg:w="98294882"/><text x="12.4227%" y="239.50"></text></g><g><title>std::sync::poison::mutex::MutexGuard&lt;T&gt;::new (32,096,288 samples, 0.01%)</title><rect x="12.2035%" y="261" width="0.0101%" height="15" fill="rgb(232,23,21)" fg:x="38872616804" fg:w="32096288"/><text x="12.4535%" y="271.50"></text></g><g><title>std::sync::poison::Flag::guard (32,096,288 samples, 0.01%)</title><rect x="12.2035%" y="245" width="0.0101%" height="15" fill="rgb(244,5,23)" fg:x="38872616804" fg:w="32096288"/><text x="12.4535%" y="255.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (398,194,573 samples, 0.13%)</title><rect x="12.2353%" y="229" width="0.1250%" height="15" fill="rgb(226,81,46)" fg:x="38973920713" fg:w="398194573"/><text x="12.4853%" y="239.50"></text></g><g><title>syscall (256,770,304 samples, 0.08%)</title><rect x="12.2797%" y="213" width="0.0806%" height="15" fill="rgb(247,70,30)" fg:x="39115344982" fg:w="256770304"/><text x="12.5297%" y="223.50"></text></g><g><title>[libc.so.6] (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="501" width="12.5833%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="511.50">[libc.so.6]</text></g><g><title>[libc.so.6] (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="485" width="12.5833%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="495.50">[libc.so.6]</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="469" width="12.5833%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="479.50">std::sys::pal::unix..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="453" width="12.5833%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="463.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="437" width="12.5833%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="447.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="421" width="12.5833%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="431.50">core::ops::function..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="405" width="12.5833%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="415.50">std::thread::Builde..</text></g><g><title>std::panic::catch_unwind (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="389" width="12.5833%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="399.50">std::panic::catch_u..</text></g><g><title>std::panicking::try (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="373" width="12.5833%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="357" width="12.5833%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="367.50">std::panicking::try..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="341" width="12.5833%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="351.50">&lt;core::panic::unwin..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="325" width="12.5833%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="335.50">std::thread::Builde..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="309" width="12.5833%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="319.50">std::sys::backtrace..</text></g><g><title>physics_engine::Worker::new::{{closure}} (40,082,245,658 samples, 12.58%)</title><rect x="0.0000%" y="293" width="12.5833%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="40082245658"/><text x="0.2500%" y="303.50">physics_engine::Wor..</text></g><g><title>std::sync::poison::mutex::Mutex&lt;T&gt;::lock (1,209,628,854 samples, 0.38%)</title><rect x="12.2035%" y="277" width="0.3797%" height="15" fill="rgb(235,36,10)" fg:x="38872616804" fg:w="1209628854"/><text x="12.4535%" y="287.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (1,177,532,566 samples, 0.37%)</title><rect x="12.2136%" y="261" width="0.3697%" height="15" fill="rgb(251,123,47)" fg:x="38904713092" fg:w="1177532566"/><text x="12.4636%" y="271.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1,149,448,314 samples, 0.36%)</title><rect x="12.2224%" y="245" width="0.3609%" height="15" fill="rgb(221,13,13)" fg:x="38932797344" fg:w="1149448314"/><text x="12.4724%" y="255.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::spin (710,130,372 samples, 0.22%)</title><rect x="12.3604%" y="229" width="0.2229%" height="15" fill="rgb(238,131,9)" fg:x="39372115286" fg:w="710130372"/><text x="12.6104%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (595,787,346 samples, 0.19%)</title><rect x="12.3962%" y="213" width="0.1870%" height="15" fill="rgb(211,50,8)" fg:x="39486458312" fg:w="595787346"/><text x="12.6462%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (595,787,346 samples, 0.19%)</title><rect x="12.3962%" y="197" width="0.1870%" height="15" fill="rgb(245,182,24)" fg:x="39486458312" fg:w="595787346"/><text x="12.6462%" y="207.50"></text></g><g><title>&lt;u32 as core::ops::arith::Sub&gt;::sub (135,406,215 samples, 0.04%)</title><rect x="23.4098%" y="261" width="0.0425%" height="15" fill="rgb(242,14,37)" fg:x="74568704105" fg:w="135406215"/><text x="23.6598%" y="271.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::m_adj (1,777,331,948 samples, 0.56%)</title><rect x="23.4092%" y="277" width="0.5580%" height="15" fill="rgb(246,228,12)" fg:x="74566698087" fg:w="1777331948"/><text x="23.6592%" y="287.50"></text></g><g><title>&lt;u32 as core::ops::bit::Shr&gt;::shr (1,624,874,580 samples, 0.51%)</title><rect x="23.4571%" y="261" width="0.5101%" height="15" fill="rgb(213,55,15)" fg:x="74719155455" fg:w="1624874580"/><text x="23.7071%" y="271.50"></text></g><g><title>core::num::&lt;impl u128&gt;::leading_zeros (1,741,223,624 samples, 0.55%)</title><rect x="23.9697%" y="277" width="0.5466%" height="15" fill="rgb(209,9,3)" fg:x="76352054107" fg:w="1741223624"/><text x="24.2197%" y="287.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f32_bits (14,048,144,054 samples, 4.41%)</title><rect x="22.3052%" y="293" width="4.4102%" height="15" fill="rgb(230,59,30)" fg:x="71050148533" fg:w="14048144054"/><text x="22.5552%" y="303.50">compi..</text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (7,005,014,856 samples, 2.20%)</title><rect x="24.5163%" y="277" width="2.1991%" height="15" fill="rgb(209,121,21)" fg:x="78093277731" fg:w="7005014856"/><text x="24.7663%" y="287.50">c..</text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (7,005,014,856 samples, 2.20%)</title><rect x="24.5163%" y="261" width="2.1991%" height="15" fill="rgb(220,109,13)" fg:x="78093277731" fg:w="7005014856"/><text x="24.7663%" y="271.50">c..</text></g><g><title>__floatuntisf (18,257,772,827 samples, 5.73%)</title><rect x="21.2482%" y="325" width="5.7318%" height="15" fill="rgb(232,18,1)" fg:x="67683047320" fg:w="18257772827"/><text x="21.4982%" y="335.50">__float..</text></g><g><title>compiler_builtins::float::conv::__floatuntisf (14,890,671,614 samples, 4.67%)</title><rect x="22.3052%" y="309" width="4.6747%" height="15" fill="rgb(215,41,42)" fg:x="71050148533" fg:w="14890671614"/><text x="22.5552%" y="319.50">compi..</text></g><g><title>core::f32::&lt;impl f32&gt;::from_bits (842,527,560 samples, 0.26%)</title><rect x="26.7155%" y="293" width="0.2645%" height="15" fill="rgb(224,123,36)" fg:x="85098292587" fg:w="842527560"/><text x="26.9655%" y="303.50"></text></g><g><title>core::time::Duration::as_millis (5,425,275,681 samples, 1.70%)</title><rect x="26.9800%" y="325" width="1.7032%" height="15" fill="rgb(240,125,3)" fg:x="85940820147" fg:w="5425275681"/><text x="27.2300%" y="335.50"></text></g><g><title>macroquad::get_context (1,733,199,552 samples, 0.54%)</title><rect x="29.4965%" y="309" width="0.5441%" height="15" fill="rgb(205,98,50)" fg:x="93956868075" fg:w="1733199552"/><text x="29.7465%" y="319.50"></text></g><g><title>macroquad::thread_assert::same_thread (1,730,190,525 samples, 0.54%)</title><rect x="29.4974%" y="293" width="0.5432%" height="15" fill="rgb(205,185,37)" fg:x="93959877102" fg:w="1730190525"/><text x="29.7474%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,716,148,399 samples, 0.54%)</title><rect x="29.5019%" y="277" width="0.5388%" height="15" fill="rgb(238,207,15)" fg:x="93973919228" fg:w="1716148399"/><text x="29.7519%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,716,148,399 samples, 0.54%)</title><rect x="29.5019%" y="261" width="0.5388%" height="15" fill="rgb(213,199,42)" fg:x="93973919228" fg:w="1716148399"/><text x="29.7519%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,716,148,399 samples, 0.54%)</title><rect x="29.5019%" y="245" width="0.5388%" height="15" fill="rgb(235,201,11)" fg:x="93973919228" fg:w="1716148399"/><text x="29.7519%" y="255.50"></text></g><g><title>macroquad::thread_assert::same_thread::CURRENT_THREAD_ID::{{constant}}::{{closure}} (1,716,148,399 samples, 0.54%)</title><rect x="29.5019%" y="229" width="0.5388%" height="15" fill="rgb(207,46,11)" fg:x="93973919228" fg:w="1716148399"/><text x="29.7519%" y="239.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (1,716,148,399 samples, 0.54%)</title><rect x="29.5019%" y="213" width="0.5388%" height="15" fill="rgb(241,35,35)" fg:x="93973919228" fg:w="1716148399"/><text x="29.7519%" y="223.50"></text></g><g><title>macroquad::input::is_key_pressed (5,989,969,748 samples, 1.88%)</title><rect x="28.6832%" y="325" width="1.8805%" height="15" fill="rgb(243,32,47)" fg:x="91366095828" fg:w="5989969748"/><text x="28.9332%" y="335.50">m..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (1,665,997,949 samples, 0.52%)</title><rect x="30.0406%" y="309" width="0.5230%" height="15" fill="rgb(247,202,23)" fg:x="95690067627" fg:w="1665997949"/><text x="30.2906%" y="319.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (1,665,997,949 samples, 0.52%)</title><rect x="30.0406%" y="293" width="0.5230%" height="15" fill="rgb(219,102,11)" fg:x="95690067627" fg:w="1665997949"/><text x="30.2906%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1,665,997,949 samples, 0.52%)</title><rect x="30.0406%" y="277" width="0.5230%" height="15" fill="rgb(243,110,44)" fg:x="95690067627" fg:w="1665997949"/><text x="30.2906%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,665,997,949 samples, 0.52%)</title><rect x="30.0406%" y="261" width="0.5230%" height="15" fill="rgb(222,74,54)" fg:x="95690067627" fg:w="1665997949"/><text x="30.2906%" y="271.50"></text></g><g><title>macroquad::get_context (841,524,551 samples, 0.26%)</title><rect x="30.8410%" y="309" width="0.2642%" height="15" fill="rgb(216,99,12)" fg:x="98239716505" fg:w="841524551"/><text x="31.0910%" y="319.50"></text></g><g><title>macroquad::thread_assert::same_thread (838,515,524 samples, 0.26%)</title><rect x="30.8420%" y="293" width="0.2632%" height="15" fill="rgb(226,22,26)" fg:x="98242725532" fg:w="838515524"/><text x="31.0920%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (833,500,479 samples, 0.26%)</title><rect x="30.8436%" y="277" width="0.2617%" height="15" fill="rgb(217,163,10)" fg:x="98247740577" fg:w="833500479"/><text x="31.0936%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (833,500,479 samples, 0.26%)</title><rect x="30.8436%" y="261" width="0.2617%" height="15" fill="rgb(213,25,53)" fg:x="98247740577" fg:w="833500479"/><text x="31.0936%" y="271.50"></text></g><g><title>core::ops::function::FnOnce::call_once (833,500,479 samples, 0.26%)</title><rect x="30.8436%" y="245" width="0.2617%" height="15" fill="rgb(252,105,26)" fg:x="98247740577" fg:w="833500479"/><text x="31.0936%" y="255.50"></text></g><g><title>macroquad::thread_assert::same_thread::CURRENT_THREAD_ID::{{constant}}::{{closure}} (833,500,479 samples, 0.26%)</title><rect x="30.8436%" y="229" width="0.2617%" height="15" fill="rgb(220,39,43)" fg:x="98247740577" fg:w="833500479"/><text x="31.0936%" y="239.50"></text></g><g><title>std::sys::thread_local::native::lazy::Storage&lt;T,D&gt;::get_or_init (833,500,479 samples, 0.26%)</title><rect x="30.8436%" y="213" width="0.2617%" height="15" fill="rgb(229,68,48)" fg:x="98247740577" fg:w="833500479"/><text x="31.0936%" y="223.50"></text></g><g><title>macroquad::input::is_mouse_button_down (2,563,691,004 samples, 0.80%)</title><rect x="30.5636%" y="325" width="0.8048%" height="15" fill="rgb(252,8,32)" fg:x="97356065576" fg:w="2563691004"/><text x="30.8136%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (838,515,524 samples, 0.26%)</title><rect x="31.1052%" y="309" width="0.2632%" height="15" fill="rgb(223,20,43)" fg:x="99081241056" fg:w="838515524"/><text x="31.3552%" y="319.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (838,515,524 samples, 0.26%)</title><rect x="31.1052%" y="293" width="0.2632%" height="15" fill="rgb(229,81,49)" fg:x="99081241056" fg:w="838515524"/><text x="31.3552%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (838,515,524 samples, 0.26%)</title><rect x="31.1052%" y="277" width="0.2632%" height="15" fill="rgb(236,28,36)" fg:x="99081241056" fg:w="838515524"/><text x="31.3552%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (838,515,524 samples, 0.26%)</title><rect x="31.1052%" y="261" width="0.2632%" height="15" fill="rgb(249,185,26)" fg:x="99081241056" fg:w="838515524"/><text x="31.3552%" y="271.50"></text></g><g><title>&lt;std::thread::ThreadId as core::cmp::PartialEq&gt;::eq (881,644,911 samples, 0.28%)</title><rect x="31.9510%" y="277" width="0.2768%" height="15" fill="rgb(249,174,33)" fg:x="101775323230" fg:w="881644911"/><text x="32.2010%" y="287.50"></text></g><g><title>&lt;core::num::nonzero::NonZero&lt;T&gt; as core::cmp::PartialEq&gt;::eq (881,644,911 samples, 0.28%)</title><rect x="31.9510%" y="261" width="0.2768%" height="15" fill="rgb(233,201,37)" fg:x="101775323230" fg:w="881644911"/><text x="32.2010%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::eq (881,644,911 samples, 0.28%)</title><rect x="31.9510%" y="245" width="0.2768%" height="15" fill="rgb(221,78,26)" fg:x="101775323230" fg:w="881644911"/><text x="32.2010%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (840,521,542 samples, 0.26%)</title><rect x="32.2278%" y="277" width="0.2639%" height="15" fill="rgb(250,127,30)" fg:x="102656968141" fg:w="840521542"/><text x="32.4778%" y="287.50"></text></g><g><title>macroquad::time::get_fps (3,587,763,193 samples, 1.13%)</title><rect x="31.3685%" y="325" width="1.1263%" height="15" fill="rgb(230,49,44)" fg:x="99919756580" fg:w="3587763193"/><text x="31.6185%" y="335.50"></text></g><g><title>macroquad::get_context (1,733,199,552 samples, 0.54%)</title><rect x="31.9507%" y="309" width="0.5441%" height="15" fill="rgb(229,67,23)" fg:x="101774320221" fg:w="1733199552"/><text x="32.2007%" y="319.50"></text></g><g><title>macroquad::thread_assert::same_thread (1,732,196,543 samples, 0.54%)</title><rect x="31.9510%" y="293" width="0.5438%" height="15" fill="rgb(249,83,47)" fg:x="101775323230" fg:w="1732196543"/><text x="32.2010%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (156,469,404 samples, 0.05%)</title><rect x="32.5087%" y="309" width="0.0491%" height="15" fill="rgb(215,43,3)" fg:x="103551652169" fg:w="156469404"/><text x="32.7587%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (156,469,404 samples, 0.05%)</title><rect x="32.5087%" y="293" width="0.0491%" height="15" fill="rgb(238,154,13)" fg:x="103551652169" fg:w="156469404"/><text x="32.7587%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (199,598,791 samples, 0.06%)</title><rect x="32.6718%" y="293" width="0.0627%" height="15" fill="rgb(219,56,2)" fg:x="104071210831" fg:w="199598791"/><text x="32.9218%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (199,598,791 samples, 0.06%)</title><rect x="32.6718%" y="277" width="0.0627%" height="15" fill="rgb(233,0,4)" fg:x="104071210831" fg:w="199598791"/><text x="32.9218%" y="287.50"></text></g><g><title>glam::f32::math::std_math::sqrt (220,661,980 samples, 0.07%)</title><rect x="32.7448%" y="277" width="0.0693%" height="15" fill="rgb(235,30,7)" fg:x="104303908919" fg:w="220661980"/><text x="32.9948%" y="287.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (220,661,980 samples, 0.07%)</title><rect x="32.7448%" y="261" width="0.0693%" height="15" fill="rgb(250,79,13)" fg:x="104303908919" fg:w="220661980"/><text x="32.9948%" y="271.50"></text></g><g><title>glam::f32::vec2::Vec2::length (340,020,051 samples, 0.11%)</title><rect x="32.7448%" y="293" width="0.1067%" height="15" fill="rgb(211,146,34)" fg:x="104303908919" fg:w="340020051"/><text x="32.9948%" y="303.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (119,358,071 samples, 0.04%)</title><rect x="32.8141%" y="277" width="0.0375%" height="15" fill="rgb(228,22,38)" fg:x="104524570899" fg:w="119358071"/><text x="33.0641%" y="287.50"></text></g><g><title>glam::f32::vec2::Vec2::project_onto (153,460,377 samples, 0.05%)</title><rect x="32.8516%" y="293" width="0.0482%" height="15" fill="rgb(235,168,5)" fg:x="104643928970" fg:w="153460377"/><text x="33.1016%" y="303.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (122,367,098 samples, 0.04%)</title><rect x="32.8613%" y="277" width="0.0384%" height="15" fill="rgb(221,155,16)" fg:x="104675022249" fg:w="122367098"/><text x="33.1113%" y="287.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Div&lt;f32&gt;&gt;::div (77,231,693 samples, 0.02%)</title><rect x="32.9363%" y="277" width="0.0242%" height="15" fill="rgb(215,215,53)" fg:x="104913738391" fg:w="77231693"/><text x="33.1863%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (77,231,693 samples, 0.02%)</title><rect x="32.9363%" y="261" width="0.0242%" height="15" fill="rgb(223,4,10)" fg:x="104913738391" fg:w="77231693"/><text x="33.1863%" y="271.50"></text></g><g><title>physics_engine::verlet::Verlet::get_velocity (167,502,503 samples, 0.05%)</title><rect x="32.9082%" y="293" width="0.0526%" height="15" fill="rgb(234,103,6)" fg:x="104824470590" fg:w="167502503"/><text x="33.1582%" y="303.50"></text></g><g><title>physics_engine::solver::Solver::apply_wall_constraints (1,352,056,132 samples, 0.42%)</title><rect x="32.5578%" y="309" width="0.4245%" height="15" fill="rgb(227,97,0)" fg:x="103708121573" fg:w="1352056132"/><text x="32.8078%" y="319.50"></text></g><g><title>physics_engine::verlet::Verlet::set_velocity (38,114,342 samples, 0.01%)</title><rect x="32.9703%" y="293" width="0.0120%" height="15" fill="rgb(234,150,53)" fg:x="105022063363" fg:w="38114342"/><text x="33.2203%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,025,075,198 samples, 0.32%)</title><rect x="32.9999%" y="149" width="0.3218%" height="15" fill="rgb(228,201,54)" fg:x="105116346209" fg:w="1025075198"/><text x="33.2499%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,025,075,198 samples, 0.32%)</title><rect x="32.9999%" y="133" width="0.3218%" height="15" fill="rgb(222,22,37)" fg:x="105116346209" fg:w="1025075198"/><text x="33.2499%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1,025,075,198 samples, 0.32%)</title><rect x="32.9999%" y="117" width="0.3218%" height="15" fill="rgb(237,53,32)" fg:x="105116346209" fg:w="1025075198"/><text x="33.2499%" y="127.50"></text></g><g><title>realloc (1,016,048,117 samples, 0.32%)</title><rect x="33.0027%" y="101" width="0.3190%" height="15" fill="rgb(233,25,53)" fg:x="105125373290" fg:w="1016048117"/><text x="33.2527%" y="111.50"></text></g><g><title>[libc.so.6] (967,903,685 samples, 0.30%)</title><rect x="33.0178%" y="85" width="0.3039%" height="15" fill="rgb(210,40,34)" fg:x="105173517722" fg:w="967903685"/><text x="33.2678%" y="95.50"></text></g><g><title>[libc.so.6] (921,765,271 samples, 0.29%)</title><rect x="33.0323%" y="69" width="0.2894%" height="15" fill="rgb(241,220,44)" fg:x="105219656136" fg:w="921765271"/><text x="33.2823%" y="79.50"></text></g><g><title>[libc.so.6] (58,174,522 samples, 0.02%)</title><rect x="33.3034%" y="53" width="0.0183%" height="15" fill="rgb(235,28,35)" fg:x="106083246885" fg:w="58174522"/><text x="33.5534%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,160,481,413 samples, 0.36%)</title><rect x="32.9955%" y="165" width="0.3643%" height="15" fill="rgb(210,56,17)" fg:x="105102304083" fg:w="1160481413"/><text x="33.2455%" y="175.50"></text></g><g><title>malloc (116,349,044 samples, 0.04%)</title><rect x="33.3233%" y="149" width="0.0365%" height="15" fill="rgb(224,130,29)" fg:x="106146436452" fg:w="116349044"/><text x="33.5733%" y="159.50"></text></g><g><title>[libc.so.6] (88,264,792 samples, 0.03%)</title><rect x="33.3321%" y="133" width="0.0277%" height="15" fill="rgb(235,212,8)" fg:x="106174520704" fg:w="88264792"/><text x="33.5821%" y="143.50"></text></g><g><title>[libc.so.6] (59,177,531 samples, 0.02%)</title><rect x="33.3412%" y="117" width="0.0186%" height="15" fill="rgb(223,33,50)" fg:x="106203607965" fg:w="59177531"/><text x="33.5912%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,185,556,638 samples, 0.37%)</title><rect x="32.9892%" y="245" width="0.3722%" height="15" fill="rgb(219,149,13)" fg:x="105082243903" fg:w="1185556638"/><text x="33.2392%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,185,556,638 samples, 0.37%)</title><rect x="32.9892%" y="229" width="0.3722%" height="15" fill="rgb(250,156,29)" fg:x="105082243903" fg:w="1185556638"/><text x="33.2392%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1,185,556,638 samples, 0.37%)</title><rect x="32.9892%" y="213" width="0.3722%" height="15" fill="rgb(216,193,19)" fg:x="105082243903" fg:w="1185556638"/><text x="33.2392%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,184,553,629 samples, 0.37%)</title><rect x="32.9895%" y="197" width="0.3719%" height="15" fill="rgb(216,135,14)" fg:x="105083246912" fg:w="1184553629"/><text x="33.2395%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1,184,553,629 samples, 0.37%)</title><rect x="32.9895%" y="181" width="0.3719%" height="15" fill="rgb(241,47,5)" fg:x="105083246912" fg:w="1184553629"/><text x="33.2395%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (10,231,694,809 samples, 3.21%)</title><rect x="32.9882%" y="261" width="3.2121%" height="15" fill="rgb(233,42,35)" fg:x="105079234876" fg:w="10231694809"/><text x="33.2382%" y="271.50">all..</text></g><g><title>core::intrinsics::copy_nonoverlapping (9,043,129,144 samples, 2.84%)</title><rect x="33.3614%" y="245" width="2.8390%" height="15" fill="rgb(231,13,6)" fg:x="106267800541" fg:w="9043129144"/><text x="33.6114%" y="255.50">co..</text></g><g><title>[libc.so.6] (9,043,129,144 samples, 2.84%)</title><rect x="33.3614%" y="229" width="2.8390%" height="15" fill="rgb(207,181,40)" fg:x="106267800541" fg:w="9043129144"/><text x="33.6114%" y="239.50">[l..</text></g><g><title>__libc_free (314,944,826 samples, 0.10%)</title><rect x="36.2003%" y="117" width="0.0989%" height="15" fill="rgb(254,173,49)" fg:x="115310929685" fg:w="314944826"/><text x="36.4503%" y="127.50"></text></g><g><title>[libc.so.6] (210,631,890 samples, 0.07%)</title><rect x="36.2331%" y="101" width="0.0661%" height="15" fill="rgb(221,1,38)" fg:x="115415242621" fg:w="210631890"/><text x="36.4831%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (10,550,651,671 samples, 3.31%)</title><rect x="32.9879%" y="293" width="3.3122%" height="15" fill="rgb(206,124,46)" fg:x="105078231867" fg:w="10550651671"/><text x="33.2379%" y="303.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (10,550,651,671 samples, 3.31%)</title><rect x="32.9879%" y="277" width="3.3122%" height="15" fill="rgb(249,21,11)" fg:x="105078231867" fg:w="10550651671"/><text x="33.2379%" y="287.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,usize)&gt;&gt; (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="261" width="0.0998%" height="15" fill="rgb(222,201,40)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="245" width="0.0998%" height="15" fill="rgb(235,61,29)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(usize,usize),alloc::alloc::Global&gt;&gt; (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="229" width="0.0998%" height="15" fill="rgb(219,207,3)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="213" width="0.0998%" height="15" fill="rgb(222,56,46)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="197" width="0.0998%" height="15" fill="rgb(239,76,54)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="181" width="0.0998%" height="15" fill="rgb(231,124,27)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="165" width="0.0998%" height="15" fill="rgb(249,195,6)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="149" width="0.0998%" height="15" fill="rgb(237,174,47)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (317,953,853 samples, 0.10%)</title><rect x="36.2003%" y="133" width="0.0998%" height="15" fill="rgb(206,201,31)" fg:x="115310929685" fg:w="317953853"/><text x="36.4503%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (46,138,414 samples, 0.01%)</title><rect x="36.3093%" y="213" width="0.0145%" height="15" fill="rgb(231,57,52)" fg:x="115657970799" fg:w="46138414"/><text x="36.5593%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (46,138,414 samples, 0.01%)</title><rect x="36.3093%" y="197" width="0.0145%" height="15" fill="rgb(248,177,22)" fg:x="115657970799" fg:w="46138414"/><text x="36.5593%" y="207.50"></text></g><g><title>alloc::alloc::realloc (46,138,414 samples, 0.01%)</title><rect x="36.3093%" y="181" width="0.0145%" height="15" fill="rgb(215,211,37)" fg:x="115657970799" fg:w="46138414"/><text x="36.5593%" y="191.50"></text></g><g><title>realloc (39,117,351 samples, 0.01%)</title><rect x="36.3115%" y="165" width="0.0123%" height="15" fill="rgb(241,128,51)" fg:x="115664991862" fg:w="39117351"/><text x="36.5615%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (70,210,630 samples, 0.02%)</title><rect x="36.3061%" y="229" width="0.0220%" height="15" fill="rgb(227,165,31)" fg:x="115647940709" fg:w="70210630"/><text x="36.5561%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (83,249,747 samples, 0.03%)</title><rect x="36.3023%" y="277" width="0.0261%" height="15" fill="rgb(228,167,24)" fg:x="115635904601" fg:w="83249747"/><text x="36.5523%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (72,216,648 samples, 0.02%)</title><rect x="36.3058%" y="261" width="0.0227%" height="15" fill="rgb(228,143,12)" fg:x="115646937700" fg:w="72216648"/><text x="36.5558%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (72,216,648 samples, 0.02%)</title><rect x="36.3058%" y="245" width="0.0227%" height="15" fill="rgb(249,149,8)" fg:x="115646937700" fg:w="72216648"/><text x="36.5558%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (85,255,765 samples, 0.03%)</title><rect x="36.3020%" y="293" width="0.0268%" height="15" fill="rgb(243,35,44)" fg:x="115634901592" fg:w="85255765"/><text x="36.5520%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (78,234,702 samples, 0.02%)</title><rect x="36.3420%" y="245" width="0.0246%" height="15" fill="rgb(246,89,9)" fg:x="115762283735" fg:w="78234702"/><text x="36.5920%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1,155,466,368 samples, 0.36%)</title><rect x="36.3354%" y="261" width="0.3627%" height="15" fill="rgb(233,213,13)" fg:x="115741220546" fg:w="1155466368"/><text x="36.5854%" y="271.50"></text></g><g><title>core::ptr::write (1,056,168,477 samples, 0.33%)</title><rect x="36.3666%" y="245" width="0.3316%" height="15" fill="rgb(233,141,41)" fg:x="115840518437" fg:w="1056168477"/><text x="36.6166%" y="255.50"></text></g><g><title>alloc::vec::from_elem (1,988,966,847 samples, 0.62%)</title><rect x="36.3297%" y="293" width="0.6244%" height="15" fill="rgb(239,167,4)" fg:x="115723166384" fg:w="1988966847"/><text x="36.5797%" y="303.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,988,966,847 samples, 0.62%)</title><rect x="36.3297%" y="277" width="0.6244%" height="15" fill="rgb(209,217,16)" fg:x="115723166384" fg:w="1988966847"/><text x="36.5797%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (815,446,317 samples, 0.26%)</title><rect x="36.6982%" y="261" width="0.2560%" height="15" fill="rgb(219,88,35)" fg:x="116896686914" fg:w="815446317"/><text x="36.9482%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (815,446,317 samples, 0.26%)</title><rect x="36.6982%" y="245" width="0.2560%" height="15" fill="rgb(220,193,23)" fg:x="116896686914" fg:w="815446317"/><text x="36.9482%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (815,446,317 samples, 0.26%)</title><rect x="36.6982%" y="229" width="0.2560%" height="15" fill="rgb(230,90,52)" fg:x="116896686914" fg:w="815446317"/><text x="36.9482%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (815,446,317 samples, 0.26%)</title><rect x="36.6982%" y="213" width="0.2560%" height="15" fill="rgb(252,106,19)" fg:x="116896686914" fg:w="815446317"/><text x="36.9482%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (807,422,245 samples, 0.25%)</title><rect x="36.7007%" y="197" width="0.2535%" height="15" fill="rgb(206,74,20)" fg:x="116904710986" fg:w="807422245"/><text x="36.9507%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (807,422,245 samples, 0.25%)</title><rect x="36.7007%" y="181" width="0.2535%" height="15" fill="rgb(230,138,44)" fg:x="116904710986" fg:w="807422245"/><text x="36.9507%" y="191.50"></text></g><g><title>alloc::alloc::alloc (807,422,245 samples, 0.25%)</title><rect x="36.7007%" y="165" width="0.2535%" height="15" fill="rgb(235,182,43)" fg:x="116904710986" fg:w="807422245"/><text x="36.9507%" y="175.50"></text></g><g><title>malloc (799,398,173 samples, 0.25%)</title><rect x="36.7032%" y="149" width="0.2510%" height="15" fill="rgb(242,16,51)" fg:x="116912735058" fg:w="799398173"/><text x="36.9532%" y="159.50"></text></g><g><title>[libc.so.6] (786,359,056 samples, 0.25%)</title><rect x="36.7073%" y="133" width="0.2469%" height="15" fill="rgb(248,9,4)" fg:x="116925774175" fg:w="786359056"/><text x="36.9573%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (294,884,646 samples, 0.09%)</title><rect x="38.8604%" y="197" width="0.0926%" height="15" fill="rgb(210,31,22)" fg:x="123784349717" fg:w="294884646"/><text x="39.1104%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (294,884,646 samples, 0.09%)</title><rect x="38.8604%" y="181" width="0.0926%" height="15" fill="rgb(239,54,39)" fg:x="123784349717" fg:w="294884646"/><text x="39.1104%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (294,884,646 samples, 0.09%)</title><rect x="38.8604%" y="165" width="0.0926%" height="15" fill="rgb(230,99,41)" fg:x="123784349717" fg:w="294884646"/><text x="39.1104%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (184,553,656 samples, 0.06%)</title><rect x="40.5073%" y="133" width="0.0579%" height="15" fill="rgb(253,106,12)" fg:x="129030086787" fg:w="184553656"/><text x="40.7573%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (93,279,837 samples, 0.03%)</title><rect x="40.5652%" y="133" width="0.0293%" height="15" fill="rgb(213,46,41)" fg:x="129214640443" fg:w="93279837"/><text x="40.8152%" y="143.50"></text></g><g><title>__rdl_alloc (194,583,746 samples, 0.06%)</title><rect x="40.7428%" y="117" width="0.0611%" height="15" fill="rgb(215,133,35)" fg:x="129780337519" fg:w="194583746"/><text x="40.9928%" y="127.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (192,577,728 samples, 0.06%)</title><rect x="40.7434%" y="101" width="0.0605%" height="15" fill="rgb(213,28,5)" fg:x="129782343537" fg:w="192577728"/><text x="40.9934%" y="111.50"></text></g><g><title>__rust_alloc (234,704,106 samples, 0.07%)</title><rect x="40.8039%" y="117" width="0.0737%" height="15" fill="rgb(215,77,49)" fg:x="129974921265" fg:w="234704106"/><text x="41.0539%" y="127.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (199,598,791 samples, 0.06%)</title><rect x="40.8776%" y="117" width="0.0627%" height="15" fill="rgb(248,100,22)" fg:x="130209625371" fg:w="199598791"/><text x="41.1276%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (13,071,213,288 samples, 4.10%)</title><rect x="40.5964%" y="133" width="4.1035%" height="15" fill="rgb(208,67,9)" fg:x="129313938334" fg:w="13071213288"/><text x="40.8464%" y="143.50">allo..</text></g><g><title>malloc (11,975,927,460 samples, 3.76%)</title><rect x="40.9402%" y="117" width="3.7597%" height="15" fill="rgb(219,133,21)" fg:x="130409224162" fg:w="11975927460"/><text x="41.1902%" y="127.50">mall..</text></g><g><title>[libc.so.6] (3,276,830,403 samples, 1.03%)</title><rect x="43.6712%" y="101" width="1.0287%" height="15" fill="rgb(246,46,29)" fg:x="139108321219" fg:w="3276830403"/><text x="43.9212%" y="111.50"></text></g><g><title>[libc.so.6] (365,095,276 samples, 0.11%)</title><rect x="44.5853%" y="85" width="0.1146%" height="15" fill="rgb(246,185,52)" fg:x="142020056346" fg:w="365095276"/><text x="44.8353%" y="95.50"></text></g><g><title>alloc::raw_vec::layout_array (171,514,539 samples, 0.05%)</title><rect x="44.6999%" y="133" width="0.0538%" height="15" fill="rgb(252,136,11)" fg:x="142385151622" fg:w="171514539"/><text x="44.9499%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::repeat (171,514,539 samples, 0.05%)</title><rect x="44.6999%" y="117" width="0.0538%" height="15" fill="rgb(219,138,53)" fg:x="142385151622" fg:w="171514539"/><text x="44.9499%" y="127.50"></text></g><g><title>core::cmp::max (392,176,519 samples, 0.12%)</title><rect x="44.7538%" y="133" width="0.1231%" height="15" fill="rgb(211,51,23)" fg:x="142556666161" fg:w="392176519"/><text x="45.0038%" y="143.50"></text></g><g><title>core::cmp::Ord::max (392,176,519 samples, 0.12%)</title><rect x="44.7538%" y="117" width="0.1231%" height="15" fill="rgb(247,221,28)" fg:x="142556666161" fg:w="392176519"/><text x="45.0038%" y="127.50"></text></g><g><title>core::cmp::max_by (392,176,519 samples, 0.12%)</title><rect x="44.7538%" y="101" width="0.1231%" height="15" fill="rgb(251,222,45)" fg:x="142556666161" fg:w="392176519"/><text x="45.0038%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (14,850,551,254 samples, 4.66%)</title><rect x="40.2440%" y="181" width="4.6621%" height="15" fill="rgb(217,162,53)" fg:x="128191571263" fg:w="14850551254"/><text x="40.4940%" y="191.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (14,151,453,981 samples, 4.44%)</title><rect x="40.4635%" y="165" width="4.4427%" height="15" fill="rgb(229,93,14)" fg:x="128890668536" fg:w="14151453981"/><text x="40.7135%" y="175.50">alloc..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (14,151,453,981 samples, 4.44%)</title><rect x="40.4635%" y="149" width="4.4427%" height="15" fill="rgb(209,67,49)" fg:x="128890668536" fg:w="14151453981"/><text x="40.7135%" y="159.50">alloc..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (93,279,837 samples, 0.03%)</title><rect x="44.8769%" y="133" width="0.0293%" height="15" fill="rgb(213,87,29)" fg:x="142948842680" fg:w="93279837"/><text x="45.1269%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (659,979,922 samples, 0.21%)</title><rect x="44.9062%" y="181" width="0.2072%" height="15" fill="rgb(205,151,52)" fg:x="143042122517" fg:w="659979922"/><text x="45.1562%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (659,979,922 samples, 0.21%)</title><rect x="44.9062%" y="165" width="0.2072%" height="15" fill="rgb(253,215,39)" fg:x="143042122517" fg:w="659979922"/><text x="45.1562%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (659,979,922 samples, 0.21%)</title><rect x="44.9062%" y="149" width="0.2072%" height="15" fill="rgb(221,220,41)" fg:x="143042122517" fg:w="659979922"/><text x="45.1562%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (659,979,922 samples, 0.21%)</title><rect x="44.9062%" y="133" width="0.2072%" height="15" fill="rgb(218,133,21)" fg:x="143042122517" fg:w="659979922"/><text x="45.1562%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20,172,517,008 samples, 6.33%)</title><rect x="38.9530%" y="197" width="6.3329%" height="15" fill="rgb(221,193,43)" fg:x="124079234363" fg:w="20172517008"/><text x="39.2030%" y="207.50">alloc::v..</text></g><g><title>core::ptr::write (549,648,932 samples, 0.17%)</title><rect x="45.1134%" y="181" width="0.1726%" height="15" fill="rgb(240,128,52)" fg:x="143702102439" fg:w="549648932"/><text x="45.3634%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (28,044,131,640 samples, 8.80%)</title><rect x="36.9557%" y="293" width="8.8041%" height="15" fill="rgb(253,114,12)" fg:x="117717148276" fg:w="28044131640"/><text x="37.2057%" y="303.50">core::iter::..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (28,044,131,640 samples, 8.80%)</title><rect x="36.9557%" y="277" width="8.8041%" height="15" fill="rgb(215,223,47)" fg:x="117717148276" fg:w="28044131640"/><text x="37.2057%" y="287.50">&lt;core::iter:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (28,044,131,640 samples, 8.80%)</title><rect x="36.9557%" y="261" width="8.8041%" height="15" fill="rgb(248,225,23)" fg:x="117717148276" fg:w="28044131640"/><text x="37.2057%" y="271.50">&lt;core::slice..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (28,029,086,505 samples, 8.80%)</title><rect x="36.9605%" y="245" width="8.7994%" height="15" fill="rgb(250,108,0)" fg:x="117732193411" fg:w="28029086505"/><text x="37.2105%" y="255.50">&lt;core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (27,839,517,804 samples, 8.74%)</title><rect x="37.0200%" y="229" width="8.7398%" height="15" fill="rgb(228,208,7)" fg:x="117921762112" fg:w="27839517804"/><text x="37.2700%" y="239.50">core::iter::..</text></g><g><title>physics_engine::solver::Solver::find_collisions_space_partitioning_parallel::{{closure}} (27,839,517,804 samples, 8.74%)</title><rect x="37.0200%" y="213" width="8.7398%" height="15" fill="rgb(244,45,10)" fg:x="117921762112" fg:w="27839517804"/><text x="37.2700%" y="223.50">physics_engi..</text></g><g><title>std::f32::&lt;impl f32&gt;::floor (1,509,528,545 samples, 0.47%)</title><rect x="45.2859%" y="197" width="0.4739%" height="15" fill="rgb(207,125,25)" fg:x="144251751371" fg:w="1509528545"/><text x="45.5359%" y="207.50"></text></g><g><title>[libm.so.6] (1,487,462,347 samples, 0.47%)</title><rect x="45.2928%" y="181" width="0.4670%" height="15" fill="rgb(210,195,18)" fg:x="144273817569" fg:w="1487462347"/><text x="45.5428%" y="191.50"></text></g><g><title>__libc_free (10,640,922,481 samples, 3.34%)</title><rect x="45.9163%" y="101" width="3.3406%" height="15" fill="rgb(249,80,12)" fg:x="146259775389" fg:w="10640922481"/><text x="46.1663%" y="111.50">__l..</text></g><g><title>[libc.so.6] (9,696,088,003 samples, 3.04%)</title><rect x="46.2129%" y="85" width="3.0440%" height="15" fill="rgb(221,65,9)" fg:x="147204609867" fg:w="9696088003"/><text x="46.4629%" y="95.50">[li..</text></g><g><title>__rdl_dealloc (64,192,576 samples, 0.02%)</title><rect x="49.2569%" y="101" width="0.0202%" height="15" fill="rgb(235,49,36)" fg:x="156900697870" fg:w="64192576"/><text x="49.5069%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (39,117,351 samples, 0.01%)</title><rect x="49.2648%" y="85" width="0.0123%" height="15" fill="rgb(225,32,20)" fg:x="156925773095" fg:w="39117351"/><text x="49.5148%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11,038,114,045 samples, 3.47%)</title><rect x="45.8722%" y="133" width="3.4653%" height="15" fill="rgb(215,141,46)" fg:x="146119354129" fg:w="11038114045"/><text x="46.1222%" y="143.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (11,038,114,045 samples, 3.47%)</title><rect x="45.8722%" y="117" width="3.4653%" height="15" fill="rgb(250,160,47)" fg:x="146119354129" fg:w="11038114045"/><text x="46.1222%" y="127.50">all..</text></g><g><title>__rust_dealloc (192,577,728 samples, 0.06%)</title><rect x="49.2770%" y="101" width="0.0605%" height="15" fill="rgb(216,222,40)" fg:x="156964890446" fg:w="192577728"/><text x="49.5270%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,433,299,591 samples, 3.59%)</title><rect x="45.7626%" y="229" width="3.5893%" height="15" fill="rgb(234,217,39)" fg:x="145770306997" fg:w="11433299591"/><text x="46.0126%" y="239.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;usize&gt;]&gt; (11,433,299,591 samples, 3.59%)</title><rect x="45.7626%" y="213" width="3.5893%" height="15" fill="rgb(207,178,40)" fg:x="145770306997" fg:w="11433299591"/><text x="46.0126%" y="223.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (11,339,016,745 samples, 3.56%)</title><rect x="45.7922%" y="197" width="3.5597%" height="15" fill="rgb(221,136,13)" fg:x="145864589843" fg:w="11339016745"/><text x="46.0422%" y="207.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (11,339,016,745 samples, 3.56%)</title><rect x="45.7922%" y="181" width="3.5597%" height="15" fill="rgb(249,199,10)" fg:x="145864589843" fg:w="11339016745"/><text x="46.0422%" y="191.50">core..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11,339,016,745 samples, 3.56%)</title><rect x="45.7922%" y="165" width="3.5597%" height="15" fill="rgb(249,222,13)" fg:x="145864589843" fg:w="11339016745"/><text x="46.0422%" y="175.50">&lt;all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (11,084,252,459 samples, 3.48%)</title><rect x="45.8722%" y="149" width="3.4798%" height="15" fill="rgb(244,185,38)" fg:x="146119354129" fg:w="11084252459"/><text x="46.1222%" y="159.50">all..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (46,138,414 samples, 0.01%)</title><rect x="49.3375%" y="133" width="0.0145%" height="15" fill="rgb(236,202,9)" fg:x="157157468174" fg:w="46138414"/><text x="49.5875%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (46,138,414 samples, 0.01%)</title><rect x="49.3375%" y="117" width="0.0145%" height="15" fill="rgb(250,229,37)" fg:x="157157468174" fg:w="46138414"/><text x="49.5875%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt;&gt; (19,158,474,909 samples, 6.01%)</title><rect x="45.7598%" y="293" width="6.0145%" height="15" fill="rgb(206,174,23)" fg:x="145761279916" fg:w="19158474909"/><text x="46.0098%" y="303.50">core::pt..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19,158,474,909 samples, 6.01%)</title><rect x="45.7598%" y="277" width="6.0145%" height="15" fill="rgb(211,33,43)" fg:x="145761279916" fg:w="19158474909"/><text x="46.0098%" y="287.50">&lt;alloc::..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (19,149,447,828 samples, 6.01%)</title><rect x="45.7626%" y="261" width="6.0117%" height="15" fill="rgb(245,58,50)" fg:x="145770306997" fg:w="19149447828"/><text x="46.0126%" y="271.50">alloc::s..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (19,149,447,828 samples, 6.01%)</title><rect x="45.7626%" y="245" width="6.0117%" height="15" fill="rgb(244,68,36)" fg:x="145770306997" fg:w="19149447828"/><text x="46.0126%" y="255.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (7,716,148,237 samples, 2.42%)</title><rect x="49.3520%" y="229" width="2.4224%" height="15" fill="rgb(232,229,15)" fg:x="157203606588" fg:w="7716148237"/><text x="49.6020%" y="239.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,716,148,237 samples, 2.42%)</title><rect x="49.3520%" y="213" width="2.4224%" height="15" fill="rgb(254,30,23)" fg:x="157203606588" fg:w="7716148237"/><text x="49.6020%" y="223.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (7,715,145,228 samples, 2.42%)</title><rect x="49.3523%" y="197" width="2.4221%" height="15" fill="rgb(235,160,14)" fg:x="157204609597" fg:w="7715145228"/><text x="49.6023%" y="207.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7,715,145,228 samples, 2.42%)</title><rect x="49.3523%" y="181" width="2.4221%" height="15" fill="rgb(212,155,44)" fg:x="157204609597" fg:w="7715145228"/><text x="49.6023%" y="191.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (7,715,145,228 samples, 2.42%)</title><rect x="49.3523%" y="165" width="2.4221%" height="15" fill="rgb(226,2,50)" fg:x="157204609597" fg:w="7715145228"/><text x="49.6023%" y="175.50">al..</text></g><g><title>__libc_free (7,715,145,228 samples, 2.42%)</title><rect x="49.3523%" y="149" width="2.4221%" height="15" fill="rgb(234,177,6)" fg:x="157204609597" fg:w="7715145228"/><text x="49.6023%" y="159.50">__..</text></g><g><title>[libc.so.6] (7,713,139,210 samples, 2.42%)</title><rect x="49.3529%" y="133" width="2.4214%" height="15" fill="rgb(217,24,9)" fg:x="157206615615" fg:w="7713139210"/><text x="49.6029%" y="143.50">[l..</text></g><g><title>[libc.so.6] (7,701,103,102 samples, 2.42%)</title><rect x="49.3567%" y="117" width="2.4177%" height="15" fill="rgb(220,13,46)" fg:x="157218651723" fg:w="7701103102"/><text x="49.6067%" y="127.50">[l..</text></g><g><title>[libc.so.6] (2,190,571,656 samples, 0.69%)</title><rect x="51.0867%" y="101" width="0.6877%" height="15" fill="rgb(239,221,27)" fg:x="162729183169" fg:w="2190571656"/><text x="51.3367%" y="111.50"></text></g><g><title>__libc_free (79,237,711 samples, 0.02%)</title><rect x="51.7970%" y="69" width="0.0249%" height="15" fill="rgb(222,198,25)" fg:x="164991971473" fg:w="79237711"/><text x="52.0470%" y="79.50"></text></g><g><title>[libc.so.6] (74,222,666 samples, 0.02%)</title><rect x="51.7986%" y="53" width="0.0233%" height="15" fill="rgb(211,99,13)" fg:x="164996986518" fg:w="74222666"/><text x="52.0486%" y="63.50"></text></g><g><title>&lt;std::sync::mpmc::list::Channel&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81,243,729 samples, 0.03%)</title><rect x="51.7970%" y="165" width="0.0255%" height="15" fill="rgb(232,111,31)" fg:x="164991971473" fg:w="81243729"/><text x="52.0470%" y="175.50"></text></g><g><title>core::mem::drop (81,243,729 samples, 0.03%)</title><rect x="51.7970%" y="149" width="0.0255%" height="15" fill="rgb(245,82,37)" fg:x="164991971473" fg:w="81243729"/><text x="52.0470%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::sync::mpmc::list::Block&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt;&gt; (81,243,729 samples, 0.03%)</title><rect x="51.7970%" y="133" width="0.0255%" height="15" fill="rgb(227,149,46)" fg:x="164991971473" fg:w="81243729"/><text x="52.0470%" y="143.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81,243,729 samples, 0.03%)</title><rect x="51.7970%" y="117" width="0.0255%" height="15" fill="rgb(218,36,50)" fg:x="164991971473" fg:w="81243729"/><text x="52.0470%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (81,243,729 samples, 0.03%)</title><rect x="51.7970%" y="101" width="0.0255%" height="15" fill="rgb(226,80,48)" fg:x="164991971473" fg:w="81243729"/><text x="52.0470%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (81,243,729 samples, 0.03%)</title><rect x="51.7970%" y="85" width="0.0255%" height="15" fill="rgb(238,224,15)" fg:x="164991971473" fg:w="81243729"/><text x="52.0470%" y="95.50"></text></g><g><title>&lt;std::sync::mpmc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (146,439,314 samples, 0.05%)</title><rect x="51.7838%" y="261" width="0.0460%" height="15" fill="rgb(241,136,10)" fg:x="164949845095" fg:w="146439314"/><text x="52.0338%" y="271.50"></text></g><g><title>std::sync::mpmc::counter::Receiver&lt;C&gt;::release (140,421,260 samples, 0.04%)</title><rect x="51.7857%" y="245" width="0.0441%" height="15" fill="rgb(208,32,45)" fg:x="164955863149" fg:w="140421260"/><text x="52.0357%" y="255.50"></text></g><g><title>core::mem::drop (104,312,936 samples, 0.03%)</title><rect x="51.7970%" y="229" width="0.0327%" height="15" fill="rgb(207,135,9)" fg:x="164991971473" fg:w="104312936"/><text x="52.0470%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::sync::mpmc::counter::Counter&lt;std::sync::mpmc::list::Channel&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt;&gt;&gt; (104,312,936 samples, 0.03%)</title><rect x="51.7970%" y="213" width="0.0327%" height="15" fill="rgb(206,86,44)" fg:x="164991971473" fg:w="104312936"/><text x="52.0470%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpmc::counter::Counter&lt;std::sync::mpmc::list::Channel&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt;&gt; (104,312,936 samples, 0.03%)</title><rect x="51.7970%" y="197" width="0.0327%" height="15" fill="rgb(245,177,15)" fg:x="164991971473" fg:w="104312936"/><text x="52.0470%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpmc::list::Channel&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt; (104,312,936 samples, 0.03%)</title><rect x="51.7970%" y="181" width="0.0327%" height="15" fill="rgb(206,64,50)" fg:x="164991971473" fg:w="104312936"/><text x="52.0470%" y="191.50"></text></g><g><title>__libc_free (85,255,765 samples, 0.03%)</title><rect x="51.8298%" y="261" width="0.0268%" height="15" fill="rgb(234,36,40)" fg:x="165096284409" fg:w="85255765"/><text x="52.0798%" y="271.50"></text></g><g><title>[libc.so.6] (80,240,720 samples, 0.03%)</title><rect x="51.8313%" y="245" width="0.0252%" height="15" fill="rgb(213,64,8)" fg:x="165101299454" fg:w="80240720"/><text x="52.0813%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpsc::Receiver&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt; (232,698,088 samples, 0.07%)</title><rect x="51.7838%" y="293" width="0.0731%" height="15" fill="rgb(210,75,36)" fg:x="164949845095" fg:w="232698088"/><text x="52.0338%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mpmc::Receiver&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt; (232,698,088 samples, 0.07%)</title><rect x="51.7838%" y="277" width="0.0731%" height="15" fill="rgb(229,88,21)" fg:x="164949845095" fg:w="232698088"/><text x="52.0338%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (74,222,666 samples, 0.02%)</title><rect x="51.8657%" y="277" width="0.0233%" height="15" fill="rgb(252,204,47)" fg:x="165210627435" fg:w="74222666"/><text x="52.1157%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (70,210,630 samples, 0.02%)</title><rect x="51.8669%" y="261" width="0.0220%" height="15" fill="rgb(208,77,27)" fg:x="165214639471" fg:w="70210630"/><text x="52.1169%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (70,210,630 samples, 0.02%)</title><rect x="51.8669%" y="245" width="0.0220%" height="15" fill="rgb(221,76,26)" fg:x="165214639471" fg:w="70210630"/><text x="52.1169%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (70,210,630 samples, 0.02%)</title><rect x="51.8669%" y="229" width="0.0220%" height="15" fill="rgb(225,139,18)" fg:x="165214639471" fg:w="70210630"/><text x="52.1169%" y="239.50"></text></g><g><title>alloc::alloc::alloc (70,210,630 samples, 0.02%)</title><rect x="51.8669%" y="213" width="0.0220%" height="15" fill="rgb(230,137,11)" fg:x="165214639471" fg:w="70210630"/><text x="52.1169%" y="223.50"></text></g><g><title>malloc (69,207,621 samples, 0.02%)</title><rect x="51.8672%" y="197" width="0.0217%" height="15" fill="rgb(212,28,1)" fg:x="165215642480" fg:w="69207621"/><text x="52.1172%" y="207.50"></text></g><g><title>[libc.so.6] (38,114,342 samples, 0.01%)</title><rect x="51.8770%" y="181" width="0.0120%" height="15" fill="rgb(248,164,17)" fg:x="165246735759" fg:w="38114342"/><text x="52.1270%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (90,270,810 samples, 0.03%)</title><rect x="51.9217%" y="181" width="0.0283%" height="15" fill="rgb(222,171,42)" fg:x="165389163037" fg:w="90270810"/><text x="52.1717%" y="191.50"></text></g><g><title>std::sync::mpmc::waker::Waker::try_select::{{closure}} (90,270,810 samples, 0.03%)</title><rect x="51.9217%" y="165" width="0.0283%" height="15" fill="rgb(243,84,45)" fg:x="165389163037" fg:w="90270810"/><text x="52.1717%" y="175.50"></text></g><g><title>std::sync::mpmc::context::Context::unpark (43,129,387 samples, 0.01%)</title><rect x="51.9365%" y="149" width="0.0135%" height="15" fill="rgb(252,49,23)" fg:x="165436304460" fg:w="43129387"/><text x="52.1865%" y="159.50"></text></g><g><title>std::thread::Thread::unpark (43,129,387 samples, 0.01%)</title><rect x="51.9365%" y="133" width="0.0135%" height="15" fill="rgb(215,19,7)" fg:x="165436304460" fg:w="43129387"/><text x="52.1865%" y="143.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::unpark (43,129,387 samples, 0.01%)</title><rect x="51.9365%" y="117" width="0.0135%" height="15" fill="rgb(238,81,41)" fg:x="165436304460" fg:w="43129387"/><text x="52.1865%" y="127.50"></text></g><g><title>std::sync::mpmc::waker::Waker::try_select (100,300,900 samples, 0.03%)</title><rect x="51.9217%" y="197" width="0.0315%" height="15" fill="rgb(210,199,37)" fg:x="165389163037" fg:w="100300900"/><text x="52.1717%" y="207.50"></text></g><g><title>std::sync::mpsc::Sender&lt;T&gt;::send (205,616,845 samples, 0.06%)</title><rect x="51.8899%" y="277" width="0.0646%" height="15" fill="rgb(244,192,49)" fg:x="165287859128" fg:w="205616845"/><text x="52.1399%" y="287.50"></text></g><g><title>std::sync::mpmc::Sender&lt;T&gt;::send (204,613,836 samples, 0.06%)</title><rect x="51.8902%" y="261" width="0.0642%" height="15" fill="rgb(226,211,11)" fg:x="165288862137" fg:w="204613836"/><text x="52.1402%" y="271.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::send (185,556,665 samples, 0.06%)</title><rect x="51.8962%" y="245" width="0.0583%" height="15" fill="rgb(236,162,54)" fg:x="165307919308" fg:w="185556665"/><text x="52.1462%" y="255.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::write (138,415,242 samples, 0.04%)</title><rect x="51.9110%" y="229" width="0.0435%" height="15" fill="rgb(220,229,9)" fg:x="165355060731" fg:w="138415242"/><text x="52.1610%" y="239.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::notify (133,400,197 samples, 0.04%)</title><rect x="51.9126%" y="213" width="0.0419%" height="15" fill="rgb(250,87,22)" fg:x="165360075776" fg:w="133400197"/><text x="52.1626%" y="223.50"></text></g><g><title>physics_engine::ThreadPool::execute (471,414,230 samples, 0.15%)</title><rect x="51.8638%" y="293" width="0.1480%" height="15" fill="rgb(239,43,17)" fg:x="165204609381" fg:w="471414230"/><text x="52.1138%" y="303.50"></text></g><g><title>std::sync::mpsc::channel (182,547,638 samples, 0.06%)</title><rect x="51.9545%" y="277" width="0.0573%" height="15" fill="rgb(231,177,25)" fg:x="165493475973" fg:w="182547638"/><text x="52.2045%" y="287.50"></text></g><g><title>std::sync::mpmc::channel (182,547,638 samples, 0.06%)</title><rect x="51.9545%" y="261" width="0.0573%" height="15" fill="rgb(219,179,1)" fg:x="165493475973" fg:w="182547638"/><text x="52.2045%" y="271.50"></text></g><g><title>std::sync::mpmc::counter::new (182,547,638 samples, 0.06%)</title><rect x="51.9545%" y="245" width="0.0573%" height="15" fill="rgb(238,219,53)" fg:x="165493475973" fg:w="182547638"/><text x="52.2045%" y="255.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (181,544,629 samples, 0.06%)</title><rect x="51.9548%" y="229" width="0.0570%" height="15" fill="rgb(232,167,36)" fg:x="165494478982" fg:w="181544629"/><text x="52.2048%" y="239.50"></text></g><g><title>alloc::alloc::exchange_malloc (155,466,395 samples, 0.05%)</title><rect x="51.9630%" y="213" width="0.0488%" height="15" fill="rgb(244,19,51)" fg:x="165520557216" fg:w="155466395"/><text x="52.2130%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (155,466,395 samples, 0.05%)</title><rect x="51.9630%" y="197" width="0.0488%" height="15" fill="rgb(224,6,22)" fg:x="165520557216" fg:w="155466395"/><text x="52.2130%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (155,466,395 samples, 0.05%)</title><rect x="51.9630%" y="181" width="0.0488%" height="15" fill="rgb(224,145,5)" fg:x="165520557216" fg:w="155466395"/><text x="52.2130%" y="191.50"></text></g><g><title>alloc::alloc::alloc (155,466,395 samples, 0.05%)</title><rect x="51.9630%" y="165" width="0.0488%" height="15" fill="rgb(234,130,49)" fg:x="165520557216" fg:w="155466395"/><text x="52.2130%" y="175.50"></text></g><g><title>__rdl_alloc (154,463,386 samples, 0.05%)</title><rect x="51.9633%" y="149" width="0.0485%" height="15" fill="rgb(254,6,2)" fg:x="165521560225" fg:w="154463386"/><text x="52.2133%" y="159.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (153,460,377 samples, 0.05%)</title><rect x="51.9636%" y="133" width="0.0482%" height="15" fill="rgb(208,96,46)" fg:x="165522563234" fg:w="153460377"/><text x="52.2136%" y="143.50"></text></g><g><title>std::sys::alloc::unix::aligned_malloc (153,460,377 samples, 0.05%)</title><rect x="51.9636%" y="117" width="0.0482%" height="15" fill="rgb(239,3,39)" fg:x="165522563234" fg:w="153460377"/><text x="52.2136%" y="127.50"></text></g><g><title>posix_memalign (152,457,368 samples, 0.05%)</title><rect x="51.9639%" y="101" width="0.0479%" height="15" fill="rgb(233,210,1)" fg:x="165523566243" fg:w="152457368"/><text x="52.2139%" y="111.50"></text></g><g><title>[libc.so.6] (134,403,206 samples, 0.04%)</title><rect x="51.9696%" y="85" width="0.0422%" height="15" fill="rgb(244,137,37)" fg:x="165541620405" fg:w="134403206"/><text x="52.2196%" y="95.50"></text></g><g><title>[libc.so.6] (105,315,945 samples, 0.03%)</title><rect x="51.9787%" y="69" width="0.0331%" height="15" fill="rgb(240,136,2)" fg:x="165570707666" fg:w="105315945"/><text x="52.2287%" y="79.50"></text></g><g><title>[libc.so.6] (93,279,837 samples, 0.03%)</title><rect x="51.9825%" y="53" width="0.0293%" height="15" fill="rgb(239,18,37)" fg:x="165582743774" fg:w="93279837"/><text x="52.2325%" y="63.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (42,126,378 samples, 0.01%)</title><rect x="52.0162%" y="261" width="0.0132%" height="15" fill="rgb(218,185,22)" fg:x="165690065737" fg:w="42126378"/><text x="52.2662%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (39,117,351 samples, 0.01%)</title><rect x="52.0757%" y="117" width="0.0123%" height="15" fill="rgb(225,218,4)" fg:x="165879634438" fg:w="39117351"/><text x="52.3257%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39,117,351 samples, 0.01%)</title><rect x="52.0757%" y="101" width="0.0123%" height="15" fill="rgb(230,182,32)" fg:x="165879634438" fg:w="39117351"/><text x="52.3257%" y="111.50"></text></g><g><title>std::sys::sync::thread_parking::futex::Parker::park (273,821,457 samples, 0.09%)</title><rect x="52.0634%" y="133" width="0.0860%" height="15" fill="rgb(242,56,43)" fg:x="165840517087" fg:w="273821457"/><text x="52.3134%" y="143.50"></text></g><g><title>std::sys::pal::unix::futex::futex_wait (195,586,755 samples, 0.06%)</title><rect x="52.0880%" y="117" width="0.0614%" height="15" fill="rgb(233,99,24)" fg:x="165918751789" fg:w="195586755"/><text x="52.3380%" y="127.50"></text></g><g><title>syscall (128,385,152 samples, 0.04%)</title><rect x="52.1091%" y="101" width="0.0403%" height="15" fill="rgb(234,209,42)" fg:x="165985953392" fg:w="128385152"/><text x="52.3591%" y="111.50"></text></g><g><title>std::sync::mpmc::context::Context::wait_until (325,977,925 samples, 0.10%)</title><rect x="52.0474%" y="165" width="0.1023%" height="15" fill="rgb(227,7,12)" fg:x="165789363628" fg:w="325977925"/><text x="52.2974%" y="175.50"></text></g><g><title>std::thread::Thread::park (300,902,700 samples, 0.09%)</title><rect x="52.0552%" y="149" width="0.0945%" height="15" fill="rgb(245,203,43)" fg:x="165814438853" fg:w="300902700"/><text x="52.3052%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (47,141,423 samples, 0.01%)</title><rect x="52.1595%" y="53" width="0.0148%" height="15" fill="rgb(238,205,33)" fg:x="166146434832" fg:w="47141423"/><text x="52.4095%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (71,213,639 samples, 0.02%)</title><rect x="52.1525%" y="101" width="0.0224%" height="15" fill="rgb(231,56,7)" fg:x="166124368634" fg:w="71213639"/><text x="52.4025%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (50,150,450 samples, 0.02%)</title><rect x="52.1591%" y="85" width="0.0157%" height="15" fill="rgb(244,186,29)" fg:x="166145431823" fg:w="50150450"/><text x="52.4091%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (50,150,450 samples, 0.02%)</title><rect x="52.1591%" y="69" width="0.0157%" height="15" fill="rgb(234,111,31)" fg:x="166145431823" fg:w="50150450"/><text x="52.4091%" y="79.50"></text></g><g><title>std::sync::mpmc::waker::Waker::register (72,216,648 samples, 0.02%)</title><rect x="52.1525%" y="149" width="0.0227%" height="15" fill="rgb(241,149,10)" fg:x="166124368634" fg:w="72216648"/><text x="52.4025%" y="159.50"></text></g><g><title>std::sync::mpmc::waker::Waker::register_with_packet (72,216,648 samples, 0.02%)</title><rect x="52.1525%" y="133" width="0.0227%" height="15" fill="rgb(249,206,44)" fg:x="166124368634" fg:w="72216648"/><text x="52.4025%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (72,216,648 samples, 0.02%)</title><rect x="52.1525%" y="117" width="0.0227%" height="15" fill="rgb(251,153,30)" fg:x="166124368634" fg:w="72216648"/><text x="52.4025%" y="127.50"></text></g><g><title>std::sync::mpmc::waker::SyncWaker::register (89,267,801 samples, 0.03%)</title><rect x="52.1497%" y="165" width="0.0280%" height="15" fill="rgb(239,152,38)" fg:x="166115341553" fg:w="89267801"/><text x="52.3997%" y="175.50"></text></g><g><title>std::sync::mpmc::context::Context::with (453,360,068 samples, 0.14%)</title><rect x="52.0360%" y="245" width="0.1423%" height="15" fill="rgb(249,139,47)" fg:x="165753255304" fg:w="453360068"/><text x="52.2860%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (453,360,068 samples, 0.14%)</title><rect x="52.0360%" y="229" width="0.1423%" height="15" fill="rgb(244,64,35)" fg:x="165753255304" fg:w="453360068"/><text x="52.2860%" y="239.50"></text></g><g><title>std::sync::mpmc::context::Context::with::{{closure}} (453,360,068 samples, 0.14%)</title><rect x="52.0360%" y="213" width="0.1423%" height="15" fill="rgb(216,46,15)" fg:x="165753255304" fg:w="453360068"/><text x="52.2860%" y="223.50"></text></g><g><title>std::sync::mpmc::context::Context::with::{{closure}} (423,269,798 samples, 0.13%)</title><rect x="52.0455%" y="197" width="0.1329%" height="15" fill="rgb(250,74,19)" fg:x="165783345574" fg:w="423269798"/><text x="52.2955%" y="207.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv::{{closure}} (423,269,798 samples, 0.13%)</title><rect x="52.0455%" y="181" width="0.1329%" height="15" fill="rgb(249,42,33)" fg:x="165783345574" fg:w="423269798"/><text x="52.2955%" y="191.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::read (154,463,386 samples, 0.05%)</title><rect x="52.1783%" y="245" width="0.0485%" height="15" fill="rgb(242,149,17)" fg:x="166206615372" fg:w="154463386"/><text x="52.4283%" y="255.50"></text></g><g><title>std::sync::mpmc::list::Slot&lt;T&gt;::wait_write (137,412,233 samples, 0.04%)</title><rect x="52.1837%" y="229" width="0.0431%" height="15" fill="rgb(244,29,21)" fg:x="166223666525" fg:w="137412233"/><text x="52.4337%" y="239.50"></text></g><g><title>physics_engine::solver::Solver::find_collisions_space_partitioning_parallel (61,368,102,656 samples, 19.27%)</title><rect x="32.9822%" y="309" width="19.2657%" height="15" fill="rgb(220,130,37)" fg:x="105060177705" fg:w="61368102656"/><text x="33.2322%" y="319.50">physics_engine::solver::Solver..</text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::recv (752,256,750 samples, 0.24%)</title><rect x="52.0118%" y="293" width="0.2362%" height="15" fill="rgb(211,67,2)" fg:x="165676023611" fg:w="752256750"/><text x="52.2618%" y="303.50"></text></g><g><title>std::sync::mpmc::Receiver&lt;T&gt;::recv (752,256,750 samples, 0.24%)</title><rect x="52.0118%" y="277" width="0.2362%" height="15" fill="rgb(235,68,52)" fg:x="165676023611" fg:w="752256750"/><text x="52.2618%" y="287.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (696,088,246 samples, 0.22%)</title><rect x="52.0294%" y="261" width="0.2185%" height="15" fill="rgb(246,142,3)" fg:x="165732192115" fg:w="696088246"/><text x="52.2794%" y="271.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::start_recv (67,201,603 samples, 0.02%)</title><rect x="52.2268%" y="245" width="0.0211%" height="15" fill="rgb(241,25,7)" fg:x="166361078758" fg:w="67201603"/><text x="52.4768%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,097,291,846 samples, 0.34%)</title><rect x="61.9995%" y="277" width="0.3445%" height="15" fill="rgb(242,119,39)" fg:x="197490466082" fg:w="1097291846"/><text x="62.2495%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,465,396,149 samples, 0.46%)</title><rect x="61.9992%" y="293" width="0.4600%" height="15" fill="rgb(241,98,45)" fg:x="197489463073" fg:w="1465396149"/><text x="62.2492%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::read (367,101,294 samples, 0.12%)</title><rect x="62.3440%" y="277" width="0.1152%" height="15" fill="rgb(254,28,30)" fg:x="198587757928" fg:w="367101294"/><text x="62.5940%" y="287.50"></text></g><g><title>core::ptr::read (367,101,294 samples, 0.12%)</title><rect x="62.3440%" y="261" width="0.1152%" height="15" fill="rgb(241,142,54)" fg:x="198587757928" fg:w="367101294"/><text x="62.5940%" y="271.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Add&gt;::add (9,919,759,010 samples, 3.11%)</title><rect x="62.4592%" y="293" width="3.1142%" height="15" fill="rgb(222,85,15)" fg:x="198954859222" fg:w="9919759010"/><text x="62.7092%" y="303.50">&lt;gl..</text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (9,919,759,010 samples, 3.11%)</title><rect x="62.4592%" y="277" width="3.1142%" height="15" fill="rgb(210,85,47)" fg:x="198954859222" fg:w="9919759010"/><text x="62.7092%" y="287.50">&lt;f3..</text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (49,147,441 samples, 0.02%)</title><rect x="65.5832%" y="293" width="0.0154%" height="15" fill="rgb(224,206,25)" fg:x="208905711511" fg:w="49147441"/><text x="65.8332%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (49,147,441 samples, 0.02%)</title><rect x="65.5832%" y="277" width="0.0154%" height="15" fill="rgb(243,201,19)" fg:x="208905711511" fg:w="49147441"/><text x="65.8332%" y="287.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (1,765,295,840 samples, 0.55%)</title><rect x="65.5986%" y="293" width="0.5542%" height="15" fill="rgb(236,59,4)" fg:x="208954858952" fg:w="1765295840"/><text x="65.8486%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (1,765,295,840 samples, 0.55%)</title><rect x="65.5986%" y="277" width="0.5542%" height="15" fill="rgb(254,179,45)" fg:x="208954858952" fg:w="1765295840"/><text x="65.8486%" y="287.50"></text></g><g><title>__libc_free (57,171,513 samples, 0.02%)</title><rect x="66.1528%" y="149" width="0.0179%" height="15" fill="rgb(226,14,10)" fg:x="210720154792" fg:w="57171513"/><text x="66.4028%" y="159.50"></text></g><g><title>[libc.so.6] (44,132,396 samples, 0.01%)</title><rect x="66.1569%" y="133" width="0.0139%" height="15" fill="rgb(244,27,41)" fg:x="210733193909" fg:w="44132396"/><text x="66.4069%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,usize)&gt;&gt; (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="293" width="0.0198%" height="15" fill="rgb(235,35,32)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="277" width="0.0198%" height="15" fill="rgb(218,68,31)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(usize,usize),alloc::alloc::Global&gt;&gt; (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="261" width="0.0198%" height="15" fill="rgb(207,120,37)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="271.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="245" width="0.0198%" height="15" fill="rgb(227,98,0)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="229" width="0.0198%" height="15" fill="rgb(207,7,3)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="213" width="0.0198%" height="15" fill="rgb(206,98,19)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="197" width="0.0198%" height="15" fill="rgb(217,5,26)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="181" width="0.0198%" height="15" fill="rgb(235,190,38)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (63,189,567 samples, 0.02%)</title><rect x="66.1528%" y="165" width="0.0198%" height="15" fill="rgb(247,86,24)" fg:x="210720154792" fg:w="63189567"/><text x="66.4028%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (1,282,848,511 samples, 0.40%)</title><rect x="66.1726%" y="293" width="0.4027%" height="15" fill="rgb(205,101,16)" fg:x="210783344359" fg:w="1282848511"/><text x="66.4226%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut_checked (1,282,848,511 samples, 0.40%)</title><rect x="66.1726%" y="277" width="0.4027%" height="15" fill="rgb(246,168,33)" fg:x="210783344359" fg:w="1282848511"/><text x="66.4226%" y="287.50"></text></g><g><title>glam::f32::vec2::&lt;impl core::ops::arith::Mul&lt;glam::f32::vec2::Vec2&gt; for f32&gt;::mul (1,121,364,062 samples, 0.35%)</title><rect x="66.5754%" y="293" width="0.3520%" height="15" fill="rgb(231,114,1)" fg:x="212066192870" fg:w="1121364062"/><text x="66.8254%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1,121,364,062 samples, 0.35%)</title><rect x="66.5754%" y="277" width="0.3520%" height="15" fill="rgb(207,184,53)" fg:x="212066192870" fg:w="1121364062"/><text x="66.8254%" y="287.50"></text></g><g><title>glam::f32::math::std_math::sqrt (510,531,581 samples, 0.16%)</title><rect x="66.9274%" y="277" width="0.1603%" height="15" fill="rgb(224,95,51)" fg:x="213187556932" fg:w="510531581"/><text x="67.1774%" y="287.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (510,531,581 samples, 0.16%)</title><rect x="66.9274%" y="261" width="0.1603%" height="15" fill="rgb(212,188,45)" fg:x="213187556932" fg:w="510531581"/><text x="67.1774%" y="271.50"></text></g><g><title>glam::f32::vec2::Vec2::length (3,865,596,686 samples, 1.21%)</title><rect x="66.9274%" y="293" width="1.2136%" height="15" fill="rgb(223,154,38)" fg:x="213187556932" fg:w="3865596686"/><text x="67.1774%" y="303.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (3,355,065,105 samples, 1.05%)</title><rect x="67.0877%" y="277" width="1.0533%" height="15" fill="rgb(251,22,52)" fg:x="213698088513" fg:w="3355065105"/><text x="67.3377%" y="287.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (685,055,147 samples, 0.22%)</title><rect x="68.1409%" y="277" width="0.2151%" height="15" fill="rgb(229,209,22)" fg:x="217053153618" fg:w="685055147"/><text x="68.3909%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (685,055,147 samples, 0.22%)</title><rect x="68.1409%" y="261" width="0.2151%" height="15" fill="rgb(234,138,34)" fg:x="217053153618" fg:w="685055147"/><text x="68.3909%" y="271.50"></text></g><g><title>glam::f32::vec2::Vec2::project_onto (1,443,329,951 samples, 0.45%)</title><rect x="68.1409%" y="293" width="0.4531%" height="15" fill="rgb(212,95,11)" fg:x="217053153618" fg:w="1443329951"/><text x="68.3909%" y="303.50"></text></g><g><title>glam::f32::vec2::Vec2::dot (758,274,804 samples, 0.24%)</title><rect x="68.3560%" y="277" width="0.2381%" height="15" fill="rgb(240,179,47)" fg:x="217738208765" fg:w="758274804"/><text x="68.6060%" y="287.50"></text></g><g><title>physics_engine::verlet::Verlet::get_mass (619,859,562 samples, 0.19%)</title><rect x="68.5941%" y="293" width="0.1946%" height="15" fill="rgb(240,163,11)" fg:x="218496483569" fg:w="619859562"/><text x="68.8441%" y="303.50"></text></g><g><title>physics_engine::verlet::Verlet::get_position (2,141,424,215 samples, 0.67%)</title><rect x="68.7887%" y="293" width="0.6723%" height="15" fill="rgb(236,37,12)" fg:x="219116343131" fg:w="2141424215"/><text x="69.0387%" y="303.50"></text></g><g><title>physics_engine::verlet::Verlet::get_radius (3,128,385,071 samples, 0.98%)</title><rect x="69.4609%" y="293" width="0.9821%" height="15" fill="rgb(232,164,16)" fg:x="221257767346" fg:w="3128385071"/><text x="69.7109%" y="303.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Div&lt;f32&gt;&gt;::div (2,250,752,196 samples, 0.71%)</title><rect x="73.6413%" y="277" width="0.7066%" height="15" fill="rgb(244,205,15)" fg:x="234573714830" fg:w="2250752196"/><text x="73.8913%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (2,250,752,196 samples, 0.71%)</title><rect x="73.6413%" y="261" width="0.7066%" height="15" fill="rgb(223,117,47)" fg:x="234573714830" fg:w="2250752196"/><text x="73.8913%" y="271.50"></text></g><g><title>physics_engine::verlet::Verlet::get_velocity (12,965,897,343 samples, 4.07%)</title><rect x="70.4430%" y="293" width="4.0705%" height="15" fill="rgb(244,107,35)" fg:x="224386152417" fg:w="12965897343"/><text x="70.6930%" y="303.50">phys..</text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (527,582,734 samples, 0.17%)</title><rect x="74.3479%" y="277" width="0.1656%" height="15" fill="rgb(205,140,8)" fg:x="236824467026" fg:w="527582734"/><text x="74.5979%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (527,582,734 samples, 0.17%)</title><rect x="74.3479%" y="261" width="0.1656%" height="15" fill="rgb(228,84,46)" fg:x="236824467026" fg:w="527582734"/><text x="74.5979%" y="271.50"></text></g><g><title>physics_engine::solver::Solver::solve_collisions (79,880,639,769 samples, 25.08%)</title><rect x="52.2479%" y="309" width="25.0775%" height="15" fill="rgb(254,188,9)" fg:x="166428280361" fg:w="79880639769"/><text x="52.4979%" y="319.50">physics_engine::solver::Solver::solve_co..</text></g><g><title>physics_engine::verlet::Verlet::set_velocity (8,943,831,253 samples, 2.81%)</title><rect x="74.5176%" y="293" width="2.8078%" height="15" fill="rgb(206,112,54)" fg:x="237365088877" fg:w="8943831253"/><text x="74.7676%" y="303.50">ph..</text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (3,479,438,221 samples, 1.09%)</title><rect x="76.2331%" y="277" width="1.0923%" height="15" fill="rgb(216,84,49)" fg:x="242829481909" fg:w="3479438221"/><text x="76.4831%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (3,479,438,221 samples, 1.09%)</title><rect x="76.2331%" y="261" width="1.0923%" height="15" fill="rgb(214,194,35)" fg:x="242829481909" fg:w="3479438221"/><text x="76.4831%" y="271.50"></text></g><g><title>physics_engine::verlet::Verlet::add_acceleration (1,443,329,951 samples, 0.45%)</title><rect x="77.3254%" y="309" width="0.4531%" height="15" fill="rgb(249,28,3)" fg:x="246308920130" fg:w="1443329951"/><text x="77.5754%" y="319.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::AddAssign&gt;::add_assign (1,443,329,951 samples, 0.45%)</title><rect x="77.3254%" y="293" width="0.4531%" height="15" fill="rgb(222,56,52)" fg:x="246308920130" fg:w="1443329951"/><text x="77.5754%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (1,443,329,951 samples, 0.45%)</title><rect x="77.3254%" y="277" width="0.4531%" height="15" fill="rgb(245,217,50)" fg:x="246308920130" fg:w="1443329951"/><text x="77.5754%" y="287.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::AddAssign&gt;::add_assign (684,052,138 samples, 0.21%)</title><rect x="78.1309%" y="293" width="0.2147%" height="15" fill="rgb(213,201,24)" fg:x="248874617152" fg:w="684052138"/><text x="78.3809%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (684,052,138 samples, 0.21%)</title><rect x="78.1309%" y="277" width="0.2147%" height="15" fill="rgb(248,116,28)" fg:x="248874617152" fg:w="684052138"/><text x="78.3809%" y="287.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Mul&lt;f32&gt;&gt;::mul (177,532,593 samples, 0.06%)</title><rect x="78.3456%" y="293" width="0.0557%" height="15" fill="rgb(219,72,43)" fg:x="249558669290" fg:w="177532593"/><text x="78.5956%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (177,532,593 samples, 0.06%)</title><rect x="78.3456%" y="277" width="0.0557%" height="15" fill="rgb(209,138,14)" fg:x="249558669290" fg:w="177532593"/><text x="78.5956%" y="287.50"></text></g><g><title>physics_engine::solver::Solver::update (146,282,844,596 samples, 45.92%)</title><rect x="32.4948%" y="325" width="45.9235%" height="15" fill="rgb(222,18,33)" fg:x="103507519773" fg:w="146282844596"/><text x="32.7448%" y="335.50">physics_engine::solver::Solver::update</text></g><g><title>physics_engine::verlet::Verlet::update_position (2,038,114,288 samples, 0.64%)</title><rect x="77.7785%" y="309" width="0.6398%" height="15" fill="rgb(213,199,7)" fg:x="247752250081" fg:w="2038114288"/><text x="78.0285%" y="319.50"></text></g><g><title>&lt;glam::f32::vec2::Vec2 as core::ops::arith::Sub&gt;::sub (54,162,486 samples, 0.02%)</title><rect x="78.4013%" y="293" width="0.0170%" height="15" fill="rgb(250,110,10)" fg:x="249736201883" fg:w="54162486"/><text x="78.6513%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (54,162,486 samples, 0.02%)</title><rect x="78.4013%" y="277" width="0.0170%" height="15" fill="rgb(248,123,6)" fg:x="249736201883" fg:w="54162486"/><text x="78.6513%" y="287.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (38,114,342 samples, 0.01%)</title><rect x="78.4269%" y="229" width="0.0120%" height="15" fill="rgb(206,91,31)" fg:x="249817445612" fg:w="38114342"/><text x="78.6769%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (36,108,324 samples, 0.01%)</title><rect x="78.4275%" y="213" width="0.0113%" height="15" fill="rgb(211,154,13)" fg:x="249819451630" fg:w="36108324"/><text x="78.6775%" y="223.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (36,108,324 samples, 0.01%)</title><rect x="78.4275%" y="197" width="0.0113%" height="15" fill="rgb(225,148,7)" fg:x="249819451630" fg:w="36108324"/><text x="78.6775%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (36,108,324 samples, 0.01%)</title><rect x="78.4275%" y="181" width="0.0113%" height="15" fill="rgb(220,160,43)" fg:x="249819451630" fg:w="36108324"/><text x="78.6775%" y="191.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (80,240,720 samples, 0.03%)</title><rect x="78.4228%" y="293" width="0.0252%" height="15" fill="rgb(213,52,39)" fg:x="249804406495" fg:w="80240720"/><text x="78.6728%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (80,240,720 samples, 0.03%)</title><rect x="78.4228%" y="277" width="0.0252%" height="15" fill="rgb(243,137,7)" fg:x="249804406495" fg:w="80240720"/><text x="78.6728%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (76,228,684 samples, 0.02%)</title><rect x="78.4240%" y="261" width="0.0239%" height="15" fill="rgb(230,79,13)" fg:x="249808418531" fg:w="76228684"/><text x="78.6740%" y="271.50"></text></g><g><title>core::fmt::write (76,228,684 samples, 0.02%)</title><rect x="78.4240%" y="245" width="0.0239%" height="15" fill="rgb(247,105,23)" fg:x="249808418531" fg:w="76228684"/><text x="78.6740%" y="255.50"></text></g><g><title>std::io::stdio::_print (83,249,747 samples, 0.03%)</title><rect x="78.4221%" y="325" width="0.0261%" height="15" fill="rgb(223,179,41)" fg:x="249802400477" fg:w="83249747"/><text x="78.6721%" y="335.50"></text></g><g><title>std::io::stdio::print_to (81,243,729 samples, 0.03%)</title><rect x="78.4228%" y="309" width="0.0255%" height="15" fill="rgb(218,9,34)" fg:x="249804406495" fg:w="81243729"/><text x="78.6728%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (1,739,217,606 samples, 0.55%)</title><rect x="79.6571%" y="277" width="0.5460%" height="15" fill="rgb(222,106,8)" fg:x="253736201775" fg:w="1739217606"/><text x="79.9071%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (2,634,904,643 samples, 0.83%)</title><rect x="81.5826%" y="229" width="0.8272%" height="15" fill="rgb(211,220,0)" fg:x="259869601810" fg:w="2634904643"/><text x="81.8326%" y="239.50"></text></g><g><title>core::cmp::PartialOrd::ge (2,634,904,643 samples, 0.83%)</title><rect x="81.5826%" y="213" width="0.8272%" height="15" fill="rgb(229,52,16)" fg:x="259869601810" fg:w="2634904643"/><text x="81.8326%" y="223.50"></text></g><g><title>&lt;std::sys::pal::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (2,483,450,284 samples, 0.78%)</title><rect x="81.6301%" y="197" width="0.7796%" height="15" fill="rgb(212,155,18)" fg:x="260021056169" fg:w="2483450284"/><text x="81.8801%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (2,478,435,239 samples, 0.78%)</title><rect x="81.6317%" y="181" width="0.7781%" height="15" fill="rgb(242,21,14)" fg:x="260026071214" fg:w="2478435239"/><text x="81.8817%" y="191.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (8,835,506,281 samples, 2.77%)</title><rect x="79.6571%" y="309" width="2.7738%" height="15" fill="rgb(222,19,48)" fg:x="253736201775" fg:w="8835506281"/><text x="79.9071%" y="319.50">&lt;s..</text></g><g><title>std::time::Instant::duration_since (8,835,506,281 samples, 2.77%)</title><rect x="79.6571%" y="293" width="2.7738%" height="15" fill="rgb(232,45,27)" fg:x="253736201775" fg:w="8835506281"/><text x="79.9071%" y="303.50">st..</text></g><g><title>std::time::Instant::checked_duration_since (7,096,288,675 samples, 2.23%)</title><rect x="80.2031%" y="277" width="2.2278%" height="15" fill="rgb(249,103,42)" fg:x="255475419381" fg:w="7096288675"/><text x="80.4531%" y="287.50">s..</text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (7,096,288,675 samples, 2.23%)</title><rect x="80.2031%" y="261" width="2.2278%" height="15" fill="rgb(246,81,33)" fg:x="255475419381" fg:w="7096288675"/><text x="80.4531%" y="271.50">s..</text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (6,629,889,490 samples, 2.08%)</title><rect x="80.3495%" y="245" width="2.0814%" height="15" fill="rgb(252,33,42)" fg:x="255941818566" fg:w="6629889490"/><text x="80.5995%" y="255.50">s..</text></g><g><title>core::time::Duration::new (67,201,603 samples, 0.02%)</title><rect x="82.4098%" y="229" width="0.0211%" height="15" fill="rgb(209,212,41)" fg:x="262504506453" fg:w="67201603"/><text x="82.6598%" y="239.50"></text></g><g><title>clock_gettime (54,071,212,181 samples, 16.97%)</title><rect x="82.8812%" y="261" width="16.9749%" height="15" fill="rgb(207,154,6)" fg:x="264006010926" fg:w="54071212181"/><text x="83.1312%" y="271.50">clock_gettime</text></g><g><title>__vdso_clock_gettime (53,193,579,306 samples, 16.70%)</title><rect x="83.1567%" y="245" width="16.6994%" height="15" fill="rgb(223,64,47)" fg:x="264883643801" fg:w="53193579306"/><text x="83.4067%" y="255.50">__vdso_clock_gettime</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (391,173,510 samples, 0.12%)</title><rect x="99.8561%" y="261" width="0.1228%" height="15" fill="rgb(211,161,38)" fg:x="318077223107" fg:w="391173510"/><text x="100.1061%" y="271.50"></text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw (278,384,144,941 samples, 87.39%)</title><rect x="12.5855%" y="405" width="87.3950%" height="15" fill="rgb(219,138,40)" fg:x="40089266721" fg:w="278384144941"/><text x="12.8355%" y="415.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw</text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::maybe_unwind (278,384,144,941 samples, 87.39%)</title><rect x="12.5855%" y="389" width="87.3950%" height="15" fill="rgb(241,228,46)" fg:x="40089266721" fg:w="278384144941"/><text x="12.8355%" y="399.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::maybe_unwind</text></g><g><title>&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::{{closure}} (278,384,144,941 samples, 87.39%)</title><rect x="12.5855%" y="373" width="87.3950%" height="15" fill="rgb(223,209,38)" fg:x="40089266721" fg:w="278384144941"/><text x="12.8355%" y="383.50">&lt;macroquad::Stage as miniquad::event::EventHandler&gt;::draw::{{closure}}</text></g><g><title>macroquad::exec::resume (278,384,144,941 samples, 87.39%)</title><rect x="12.5855%" y="357" width="87.3950%" height="15" fill="rgb(236,164,45)" fg:x="40089266721" fg:w="278384144941"/><text x="12.8355%" y="367.50">macroquad::exec::resume</text></g><g><title>physics_engine::amain::{{closure}} (278,384,144,941 samples, 87.39%)</title><rect x="12.5855%" y="341" width="87.3950%" height="15" fill="rgb(231,15,5)" fg:x="40089266721" fg:w="278384144941"/><text x="12.8355%" y="351.50">physics_engine::amain::{{closure}}</text></g><g><title>std::time::Instant::elapsed (68,587,761,438 samples, 21.53%)</title><rect x="78.4483%" y="325" width="21.5322%" height="15" fill="rgb(252,35,15)" fg:x="249885650224" fg:w="68587761438"/><text x="78.6983%" y="335.50">std::time::Instant::elapsed</text></g><g><title>std::time::Instant::now (55,901,703,606 samples, 17.55%)</title><rect x="82.4309%" y="309" width="17.5496%" height="15" fill="rgb(248,181,18)" fg:x="262571708056" fg:w="55901703606"/><text x="82.6809%" y="319.50">std::time::Instant::now</text></g><g><title>std::sys::pal::unix::time::Instant::now (55,901,703,606 samples, 17.55%)</title><rect x="82.4309%" y="293" width="17.5496%" height="15" fill="rgb(233,39,42)" fg:x="262571708056" fg:w="55901703606"/><text x="82.6809%" y="303.50">std::sys::pal::unix::time::..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (55,899,697,588 samples, 17.55%)</title><rect x="82.4315%" y="277" width="17.5490%" height="15" fill="rgb(238,110,33)" fg:x="262573714074" fg:w="55899697588"/><text x="82.6815%" y="287.50">std::sys::pal::unix::time::..</text></g><g><title>macroquad::Window::new (278,401,196,094 samples, 87.40%)</title><rect x="12.5855%" y="485" width="87.4003%" height="15" fill="rgb(233,195,10)" fg:x="40089266721" fg:w="278401196094"/><text x="12.8355%" y="495.50">macroquad::Window::new</text></g><g><title>macroquad::Window::from_config (278,401,196,094 samples, 87.40%)</title><rect x="12.5855%" y="469" width="87.4003%" height="15" fill="rgb(254,105,3)" fg:x="40089266721" fg:w="278401196094"/><text x="12.8355%" y="479.50">macroquad::Window::from_config</text></g><g><title>miniquad::start (278,401,196,094 samples, 87.40%)</title><rect x="12.5855%" y="453" width="87.4003%" height="15" fill="rgb(221,225,9)" fg:x="40089266721" fg:w="278401196094"/><text x="12.8355%" y="463.50">miniquad::start</text></g><g><title>miniquad::native::linux_x11::run (278,401,196,094 samples, 87.40%)</title><rect x="12.5855%" y="437" width="87.4003%" height="15" fill="rgb(224,227,45)" fg:x="40089266721" fg:w="278401196094"/><text x="12.8355%" y="447.50">miniquad::native::linux_x11::run</text></g><g><title>miniquad::native::linux_x11::glx_main_loop (278,401,196,094 samples, 87.40%)</title><rect x="12.5855%" y="421" width="87.4003%" height="15" fill="rgb(229,198,43)" fg:x="40089266721" fg:w="278401196094"/><text x="12.8355%" y="431.50">miniquad::native::linux_x11::glx_main_loop</text></g><g><title>[unknown] (278,409,220,166 samples, 87.40%)</title><rect x="12.5833%" y="501" width="87.4029%" height="15" fill="rgb(206,209,35)" fg:x="40082245658" fg:w="278409220166"/><text x="12.8333%" y="511.50">[unknown]</text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (40,120,360 samples, 0.01%)</title><rect x="99.9865%" y="485" width="0.0126%" height="15" fill="rgb(245,195,53)" fg:x="318492468833" fg:w="40120360"/><text x="100.2365%" y="495.50"></text></g><g><title>std::time::Instant::duration_since (40,120,360 samples, 0.01%)</title><rect x="99.9865%" y="469" width="0.0126%" height="15" fill="rgb(240,92,26)" fg:x="318492468833" fg:w="40120360"/><text x="100.2365%" y="479.50"></text></g><g><title>std::time::Instant::checked_duration_since (40,120,360 samples, 0.01%)</title><rect x="99.9865%" y="453" width="0.0126%" height="15" fill="rgb(207,40,23)" fg:x="318492468833" fg:w="40120360"/><text x="100.2365%" y="463.50"></text></g><g><title>std::sys::pal::unix::time::Instant::checked_sub_instant (40,120,360 samples, 0.01%)</title><rect x="99.9865%" y="437" width="0.0126%" height="15" fill="rgb(223,111,35)" fg:x="318492468833" fg:w="40120360"/><text x="100.2365%" y="447.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::sub_timespec (40,120,360 samples, 0.01%)</title><rect x="99.9865%" y="421" width="0.0126%" height="15" fill="rgb(229,147,28)" fg:x="318492468833" fg:w="40120360"/><text x="100.2365%" y="431.50"></text></g><g><title>all (318,535,598,220 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(211,29,28)" fg:x="0" fg:w="318535598220"/><text x="0.2500%" y="543.50"></text></g><g><title>physics_engine (318,535,598,220 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(228,72,33)" fg:x="0" fg:w="318535598220"/><text x="0.2500%" y="527.50">physics_engine</text></g><g><title>std::time::Instant::elapsed (43,129,387 samples, 0.01%)</title><rect x="99.9865%" y="501" width="0.0135%" height="15" fill="rgb(205,214,31)" fg:x="318492468833" fg:w="43129387"/><text x="100.2365%" y="511.50"></text></g></svg></svg>